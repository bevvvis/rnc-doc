{
	"id": 0,
	"name": "RNC Package - v0.3.20-0",
	"kind": 1,
	"flags": {},
	"originalName": "RNC Package",
	"children": [
		{
			"id": 49,
			"name": "Component",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {},
			"originalName": "components",
			"children": [
				{
					"id": 366,
					"name": "atom",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "Atom 主要涵盖木偶组件，行为主要靠外部控制。"
					},
					"children": [
						{
							"id": 373,
							"name": "cell",
							"kind": 16777216,
							"kindString": "Reference",
							"flags": {},
							"sources": [
								{
									"fileName": "src/components/atom/index.ts",
									"line": 7,
									"character": 36
								}
							],
							"target": 367
						},
						{
							"id": 377,
							"name": "safeAreaLayout",
							"kind": 4,
							"kindString": "Namespace",
							"flags": {},
							"children": [
								{
									"id": 481,
									"name": "SafeAreaLayoutComponent",
									"kind": 128,
									"kindString": "Class",
									"flags": {},
									"children": [
										{
											"id": 484,
											"name": "constructor",
											"kind": 512,
											"kindString": "Constructor",
											"flags": {},
											"signatures": [
												{
													"id": 485,
													"name": "new SafeAreaLayoutComponent",
													"kind": 16384,
													"kindString": "Constructor signature",
													"flags": {},
													"parameters": [
														{
															"id": 486,
															"name": "props",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"id": 378,
																		"name": "SafeAreaLayoutProps"
																	},
																	{
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reference",
																				"id": 378,
																				"name": "SafeAreaLayoutProps"
																			}
																		],
																		"name": "Readonly"
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 481,
														"name": "SafeAreaLayoutComponent"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "React.Component<SafeAreaLayoutProps>.constructor"
													}
												},
												{
													"id": 487,
													"name": "new SafeAreaLayoutComponent",
													"kind": 16384,
													"kindString": "Constructor signature",
													"flags": {},
													"comment": {
														"tags": [
															{
																"tag": "deprecated",
																"text": ""
															},
															{
																"tag": "see",
																"text": "https://reactjs.org/docs/legacy-context.html\n"
															}
														]
													},
													"parameters": [
														{
															"id": 488,
															"name": "props",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 378,
																"name": "SafeAreaLayoutProps"
															}
														},
														{
															"id": 489,
															"name": "context",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 481,
														"name": "SafeAreaLayoutComponent"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "React.Component<SafeAreaLayoutProps>.constructor"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component<SafeAreaLayoutProps>.constructor"
											}
										},
										{
											"id": 500,
											"name": "context",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"shortText": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.",
												"text": "```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
												"tags": [
													{
														"tag": "see",
														"text": "https://reactjs.org/docs/context.html\n"
													}
												]
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react/index.d.ts",
													"line": 472,
													"character": 8
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.context"
											}
										},
										{
											"id": 522,
											"name": "props",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isReadonly": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react/index.d.ts",
													"line": 497,
													"character": 17
												}
											],
											"type": {
												"type": "intersection",
												"types": [
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"id": 378,
																"name": "SafeAreaLayoutProps"
															}
														],
														"name": "Readonly"
													},
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reflection",
																"declaration": {
																	"id": 523,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 524,
																			"name": "children",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"sources": [
																				{
																					"fileName": "node_modules/@types/react/index.d.ts",
																					"line": 497,
																					"character": 49
																				}
																			],
																			"type": {
																				"type": "reference",
																				"name": "ReactNode"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				524
																			]
																		}
																	]
																}
															}
														],
														"name": "Readonly"
													}
												]
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.props"
											}
										},
										{
											"id": 527,
											"name": "refs",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"comment": {
												"tags": [
													{
														"tag": "deprecated",
														"text": "\nhttps://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n"
													}
												]
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react/index.d.ts",
													"line": 503,
													"character": 8
												}
											],
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 528,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 529,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 530,
																"name": "key",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "reference",
															"name": "ReactInstance"
														}
													}
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.refs"
											}
										},
										{
											"id": 525,
											"name": "state",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "node_modules/@types/react/index.d.ts",
													"line": 498,
													"character": 8
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 526,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {}
														}
													}
												],
												"name": "Readonly"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.state"
											}
										},
										{
											"id": 483,
											"name": "contextType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isStatic": true,
												"isOptional": true
											},
											"comment": {
												"shortText": "If set, `this.context` will be set at runtime to the current value of the given Context.",
												"text": "Usage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
												"tags": [
													{
														"tag": "see",
														"text": "https://reactjs.org/docs/context.html#classcontexttype\n"
													}
												]
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react/index.d.ts",
													"line": 454,
													"character": 15
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Context"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.contextType"
											}
										},
										{
											"id": 482,
											"name": "styledComponentName",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isStatic": true
											},
											"sources": [
												{
													"fileName": "src/components/atom/safe-area-layout.tsx",
													"line": 33,
													"character": 9
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "'SafeAreaLayout'"
										},
										{
											"id": 558,
											"name": "UNSAFE_componentWillMount",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"signatures": [
												{
													"id": 559,
													"name": "UNSAFE_componentWillMount",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
														"text": "This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
														"tags": [
															{
																"tag": "deprecated",
																"text": "16.3, use componentDidMount or the constructor instead"
															},
															{
																"tag": "see",
																"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
															},
															{
																"tag": "see",
																"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
															}
														]
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "React.Component.UNSAFE_componentWillMount"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.UNSAFE_componentWillMount"
											}
										},
										{
											"id": 564,
											"name": "UNSAFE_componentWillReceiveProps",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"signatures": [
												{
													"id": 565,
													"name": "UNSAFE_componentWillReceiveProps",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
														"text": "Calling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
														"tags": [
															{
																"tag": "deprecated",
																"text": "16.3, use static getDerivedStateFromProps instead"
															},
															{
																"tag": "see",
																"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
															},
															{
																"tag": "see",
																"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
															}
														]
													},
													"parameters": [
														{
															"id": 566,
															"name": "nextProps",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reference",
																		"id": 378,
																		"name": "SafeAreaLayoutProps"
																	}
																],
																"name": "Readonly"
															}
														},
														{
															"id": 567,
															"name": "nextContext",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "React.Component.UNSAFE_componentWillReceiveProps"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.UNSAFE_componentWillReceiveProps"
											}
										},
										{
											"id": 574,
											"name": "UNSAFE_componentWillUpdate",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"signatures": [
												{
													"id": 575,
													"name": "UNSAFE_componentWillUpdate",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
														"text": "Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
														"tags": [
															{
																"tag": "deprecated",
																"text": "16.3, use getSnapshotBeforeUpdate instead"
															},
															{
																"tag": "see",
																"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
															},
															{
																"tag": "see",
																"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
															}
														]
													},
													"parameters": [
														{
															"id": 576,
															"name": "nextProps",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reference",
																		"id": 378,
																		"name": "SafeAreaLayoutProps"
																	}
																],
																"name": "Readonly"
															}
														},
														{
															"id": 577,
															"name": "nextState",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 578,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {}
																		}
																	}
																],
																"name": "Readonly"
															}
														},
														{
															"id": 579,
															"name": "nextContext",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "React.Component.UNSAFE_componentWillUpdate"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.UNSAFE_componentWillUpdate"
											}
										},
										{
											"id": 541,
											"name": "componentDidCatch",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"signatures": [
												{
													"id": 542,
													"name": "componentDidCatch",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount."
													},
													"parameters": [
														{
															"id": 543,
															"name": "error",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "Error"
															}
														},
														{
															"id": 544,
															"name": "errorInfo",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "ErrorInfo"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "React.Component.componentDidCatch"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.componentDidCatch"
											}
										},
										{
											"id": 531,
											"name": "componentDidMount",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"signatures": [
												{
													"id": 532,
													"name": "componentDidMount",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Called immediately after a component is mounted. Setting state here will trigger re-rendering."
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "React.Component.componentDidMount"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.componentDidMount"
											}
										},
										{
											"id": 550,
											"name": "componentDidUpdate",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"signatures": [
												{
													"id": 551,
													"name": "componentDidUpdate",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Called immediately after updating occurs. Not called for the initial render.",
														"text": "The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n"
													},
													"parameters": [
														{
															"id": 552,
															"name": "prevProps",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reference",
																		"id": 378,
																		"name": "SafeAreaLayoutProps"
																	}
																],
																"name": "Readonly"
															}
														},
														{
															"id": 553,
															"name": "prevState",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 554,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {}
																		}
																	}
																],
																"name": "Readonly"
															}
														},
														{
															"id": 555,
															"name": "snapshot",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "React.Component.componentDidUpdate"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.componentDidUpdate"
											}
										},
										{
											"id": 556,
											"name": "componentWillMount",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"signatures": [
												{
													"id": 557,
													"name": "componentWillMount",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
														"text": "Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
														"tags": [
															{
																"tag": "deprecated",
																"text": "16.3, use componentDidMount or the constructor instead; will stop working in React 17"
															},
															{
																"tag": "see",
																"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
															},
															{
																"tag": "see",
																"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
															}
														]
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "React.Component.componentWillMount"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.componentWillMount"
											}
										},
										{
											"id": 560,
											"name": "componentWillReceiveProps",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"signatures": [
												{
													"id": 561,
													"name": "componentWillReceiveProps",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
														"text": "Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
														"tags": [
															{
																"tag": "deprecated",
																"text": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17"
															},
															{
																"tag": "see",
																"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
															},
															{
																"tag": "see",
																"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
															}
														]
													},
													"parameters": [
														{
															"id": 562,
															"name": "nextProps",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reference",
																		"id": 378,
																		"name": "SafeAreaLayoutProps"
																	}
																],
																"name": "Readonly"
															}
														},
														{
															"id": 563,
															"name": "nextContext",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "React.Component.componentWillReceiveProps"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.componentWillReceiveProps"
											}
										},
										{
											"id": 539,
											"name": "componentWillUnmount",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"signatures": [
												{
													"id": 540,
													"name": "componentWillUnmount",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "React.Component.componentWillUnmount"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.componentWillUnmount"
											}
										},
										{
											"id": 568,
											"name": "componentWillUpdate",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"signatures": [
												{
													"id": 569,
													"name": "componentWillUpdate",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
														"text": "Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
														"tags": [
															{
																"tag": "deprecated",
																"text": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"
															},
															{
																"tag": "see",
																"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
															},
															{
																"tag": "see",
																"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
															}
														]
													},
													"parameters": [
														{
															"id": 570,
															"name": "nextProps",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reference",
																		"id": 378,
																		"name": "SafeAreaLayoutProps"
																	}
																],
																"name": "Readonly"
															}
														},
														{
															"id": 571,
															"name": "nextState",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 572,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {}
																		}
																	}
																],
																"name": "Readonly"
															}
														},
														{
															"id": 573,
															"name": "nextContext",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "React.Component.componentWillUpdate"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.componentWillUpdate"
											}
										},
										{
											"id": 492,
											"name": "createInsets",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isPrivate": true
											},
											"sources": [
												{
													"fileName": "src/components/atom/safe-area-layout.tsx",
													"line": 39,
													"character": 10
												}
											],
											"signatures": [
												{
													"id": 493,
													"name": "createInsets",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 494,
															"name": "insets",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "reference",
																		"name": "Inset"
																	},
																	{
																		"type": "array",
																		"elementType": {
																			"type": "reference",
																			"name": "Inset"
																		}
																	}
																]
															}
														},
														{
															"id": 495,
															"name": "safeAreaInsets",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "EdgeInsets"
															}
														},
														{
															"id": 496,
															"name": "style",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "ViewStyle"
															}
														}
													],
													"type": {
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "FlexStyle"
														}
													}
												}
											]
										},
										{
											"id": 517,
											"name": "forceUpdate",
											"kind": 2048,
											"kindString": "Method",
											"flags": {},
											"sources": [
												{
													"fileName": "node_modules/@types/react/index.d.ts",
													"line": 489,
													"character": 8
												}
											],
											"signatures": [
												{
													"id": 518,
													"name": "forceUpdate",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 519,
															"name": "callback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 520,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 521,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "React.Component.forceUpdate"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.forceUpdate"
											}
										},
										{
											"id": 545,
											"name": "getSnapshotBeforeUpdate",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"signatures": [
												{
													"id": 546,
													"name": "getSnapshotBeforeUpdate",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.",
														"text": "Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n"
													},
													"parameters": [
														{
															"id": 547,
															"name": "prevProps",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reference",
																		"id": 378,
																		"name": "SafeAreaLayoutProps"
																	}
																],
																"name": "Readonly"
															}
														},
														{
															"id": 548,
															"name": "prevState",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 549,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {}
																		}
																	}
																],
																"name": "Readonly"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "any"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "React.Component.getSnapshotBeforeUpdate"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.getSnapshotBeforeUpdate"
											}
										},
										{
											"id": 490,
											"name": "render",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isPublic": true
											},
											"sources": [
												{
													"fileName": "src/components/atom/safe-area-layout.tsx",
													"line": 35,
													"character": 9
												}
											],
											"signatures": [
												{
													"id": 491,
													"name": "render",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "ViewProps"
															},
															{
																"type": "union",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "intrinsic",
																				"name": "any"
																			}
																		],
																		"name": "JSXElementConstructor"
																	}
																]
															}
														],
														"name": "ReactElement"
													},
													"overwrites": {
														"type": "reference",
														"name": "React.Component.render"
													}
												}
											],
											"overwrites": {
												"type": "reference",
												"name": "React.Component.render"
											}
										},
										{
											"id": 497,
											"name": "renderComponent",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isPrivate": true
											},
											"sources": [
												{
													"fileName": "src/components/atom/safe-area-layout.tsx",
													"line": 49,
													"character": 10
												}
											],
											"signatures": [
												{
													"id": 498,
													"name": "renderComponent",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 499,
															"name": "safeAreaInsets",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "literal",
																		"value": null
																	},
																	{
																		"type": "reference",
																		"name": "EdgeInsets"
																	}
																]
															}
														}
													],
													"type": {
														"type": "reference",
														"name": "ReactNode"
													}
												}
											]
										},
										{
											"id": 501,
											"name": "setState",
											"kind": 2048,
											"kindString": "Method",
											"flags": {},
											"sources": [
												{
													"fileName": "node_modules/@types/react/index.d.ts",
													"line": 484,
													"character": 8
												}
											],
											"signatures": [
												{
													"id": 502,
													"name": "setState",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"typeParameter": [
														{
															"id": 503,
															"name": "K",
															"kind": 131072,
															"kindString": "Type parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "never"
															}
														}
													],
													"parameters": [
														{
															"id": 504,
															"name": "state",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "union",
																"types": [
																	{
																		"type": "literal",
																		"value": null
																	},
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 505,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {}
																		}
																	},
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 506,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"signatures": [
																				{
																					"id": 507,
																					"name": "__type",
																					"kind": 4096,
																					"kindString": "Call signature",
																					"flags": {},
																					"parameters": [
																						{
																							"id": 508,
																							"name": "prevState",
																							"kind": 32768,
																							"kindString": "Parameter",
																							"flags": {},
																							"type": {
																								"type": "reference",
																								"typeArguments": [
																									{
																										"type": "reflection",
																										"declaration": {
																											"id": 509,
																											"name": "__type",
																											"kind": 65536,
																											"kindString": "Type literal",
																											"flags": {}
																										}
																									}
																								],
																								"name": "Readonly"
																							}
																						},
																						{
																							"id": 510,
																							"name": "props",
																							"kind": 32768,
																							"kindString": "Parameter",
																							"flags": {},
																							"type": {
																								"type": "reference",
																								"typeArguments": [
																									{
																										"type": "reference",
																										"id": 378,
																										"name": "SafeAreaLayoutProps"
																									}
																								],
																								"name": "Readonly"
																							}
																						}
																					],
																					"type": {
																						"type": "union",
																						"types": [
																							{
																								"type": "literal",
																								"value": null
																							},
																							{
																								"type": "reflection",
																								"declaration": {
																									"id": 511,
																									"name": "__type",
																									"kind": 65536,
																									"kindString": "Type literal",
																									"flags": {}
																								}
																							},
																							{
																								"type": "reference",
																								"typeArguments": [
																									{
																										"type": "reflection",
																										"declaration": {
																											"id": 512,
																											"name": "__type",
																											"kind": 65536,
																											"kindString": "Type literal",
																											"flags": {}
																										}
																									},
																									{
																										"type": "reference",
																										"id": 503,
																										"name": "K"
																									}
																								],
																								"name": "Pick"
																							}
																						]
																					}
																				}
																			]
																		}
																	},
																	{
																		"type": "reference",
																		"typeArguments": [
																			{
																				"type": "reflection",
																				"declaration": {
																					"id": 513,
																					"name": "__type",
																					"kind": 65536,
																					"kindString": "Type literal",
																					"flags": {}
																				}
																			},
																			{
																				"type": "reference",
																				"id": 503,
																				"name": "K"
																			}
																		],
																		"name": "Pick"
																	}
																]
															}
														},
														{
															"id": 514,
															"name": "callback",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {
																"isOptional": true
															},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 515,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 516,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "void"
																			}
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "React.Component.setState"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.setState"
											}
										},
										{
											"id": 533,
											"name": "shouldComponentUpdate",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"signatures": [
												{
													"id": 534,
													"name": "shouldComponentUpdate",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Called to determine whether the change in props and state should trigger a re-render.",
														"text": "`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n"
													},
													"parameters": [
														{
															"id": 535,
															"name": "nextProps",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reference",
																		"id": 378,
																		"name": "SafeAreaLayoutProps"
																	}
																],
																"name": "Readonly"
															}
														},
														{
															"id": 536,
															"name": "nextState",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 537,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {}
																		}
																	}
																],
																"name": "Readonly"
															}
														},
														{
															"id": 538,
															"name": "nextContext",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "React.Component.shouldComponentUpdate"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.shouldComponentUpdate"
											}
										}
									],
									"groups": [
										{
											"title": "Constructors",
											"kind": 512,
											"children": [
												484
											]
										},
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												500,
												522,
												527,
												525,
												483,
												482
											]
										},
										{
											"title": "Methods",
											"kind": 2048,
											"children": [
												558,
												564,
												574,
												541,
												531,
												550,
												556,
												560,
												539,
												568,
												492,
												517,
												545,
												490,
												497,
												501,
												533
											]
										}
									],
									"sources": [
										{
											"fileName": "src/components/atom/safe-area-layout.tsx",
											"line": 32,
											"character": 13
										}
									],
									"extendedTypes": [
										{
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"id": 378,
													"name": "SafeAreaLayoutProps"
												}
											],
											"name": "Component"
										}
									]
								},
								{
									"id": 378,
									"name": "SafeAreaLayoutProps",
									"kind": 256,
									"kindString": "Interface",
									"flags": {},
									"children": [
										{
											"id": 454,
											"name": "accessibilityActions",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Provides an array of custom actions available for accessibility."
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2062,
													"character": 4
												}
											],
											"type": {
												"type": "typeOperator",
												"operator": "readonly",
												"target": {
													"type": "array",
													"elementType": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reflection",
																"declaration": {
																	"id": 455,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 457,
																			"name": "label",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {
																				"isOptional": true
																			},
																			"sources": [
																				{
																					"fileName": "node_modules/@types/react-native/index.d.ts",
																					"line": 2096,
																					"character": 4
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 456,
																			"name": "name",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "node_modules/@types/react-native/index.d.ts",
																					"line": 2095,
																					"character": 4
																				}
																			],
																			"type": {
																				"type": "reference",
																				"name": "AccessibilityActionName"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				457,
																				456
																			]
																		}
																	]
																}
															}
														],
														"name": "Readonly"
													}
												}
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.accessibilityActions"
											}
										},
										{
											"id": 466,
											"name": "accessibilityComponentType",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "In some cases, we also want to alert the end user of the type of selected component (i.e., that it is a “button”).\nIf we were using native buttons, this would work automatically. Since we are using javascript, we need to\nprovide a bit more context for TalkBack. To do so, you must specify the ‘accessibilityComponentType’ property\nfor any UI component. For instances, we support ‘button’, ‘radiobutton_checked’ and ‘radiobutton_unchecked’ and so on.",
												"tags": [
													{
														"tag": "platform",
														"text": "android\n"
													}
												]
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2216,
													"character": 4
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "button"
													},
													{
														"type": "literal",
														"value": "none"
													},
													{
														"type": "literal",
														"value": "radiobutton_checked"
													},
													{
														"type": "literal",
														"value": "radiobutton_unchecked"
													}
												]
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.accessibilityComponentType"
											}
										},
										{
											"id": 469,
											"name": "accessibilityElementsHidden",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "A Boolean value indicating whether the accessibility elements contained within this accessibility element\nare hidden to the screen reader.",
												"tags": [
													{
														"tag": "platform",
														"text": "ios\n"
													}
												]
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2246,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.accessibilityElementsHidden"
											}
										},
										{
											"id": 461,
											"name": "accessibilityHint",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "An accessibility hint helps users understand what will happen when they perform an action on the accessibility element when that result is not obvious from the accessibility label."
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2081,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.accessibilityHint"
											}
										},
										{
											"id": 478,
											"name": "accessibilityIgnoresInvertColors",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "https://facebook.github.io/react-native/docs/accessibility#accessibilityignoresinvertcolorsios",
												"tags": [
													{
														"tag": "platform",
														"text": "ios\n"
													}
												]
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2283,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.accessibilityIgnoresInvertColors"
											}
										},
										{
											"id": 458,
											"name": "accessibilityLabel",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Overrides the text that's read by the screen reader when the user interacts with the element. By default, the\nlabel is constructed by traversing all the children and accumulating all the Text nodes separated by space."
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2068,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.accessibilityLabel"
											}
										},
										{
											"id": 467,
											"name": "accessibilityLiveRegion",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Indicates to accessibility services whether the user should be notified when this view changes.\nWorks for Android API >= 19 only.\nSee http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion for references.",
												"tags": [
													{
														"tag": "platform",
														"text": "android\n"
													}
												]
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2224,
													"character": 4
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "none"
													},
													{
														"type": "literal",
														"value": "polite"
													},
													{
														"type": "literal",
														"value": "assertive"
													}
												]
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.accessibilityLiveRegion"
											}
										},
										{
											"id": 459,
											"name": "accessibilityRole",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Accessibility Role tells a person using either VoiceOver on iOS or TalkBack on Android the type of element that is focused on."
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2073,
													"character": 4
												}
											],
											"type": {
												"type": "reference",
												"name": "AccessibilityRole"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.accessibilityRole"
											}
										},
										{
											"id": 460,
											"name": "accessibilityState",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Accessibility State tells a person using either VoiceOver on iOS or TalkBack on Android the state of the element currently focused on."
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2077,
													"character": 4
												}
											],
											"type": {
												"type": "reference",
												"name": "AccessibilityState"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.accessibilityState"
											}
										},
										{
											"id": 470,
											"name": "accessibilityTraits",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Accessibility traits tell a person using VoiceOver what kind of element they have selected.\nIs this element a label? A button? A header? These questions are answered by accessibilityTraits.",
												"tags": [
													{
														"tag": "platform",
														"text": "ios\n"
													}
												]
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2253,
													"character": 4
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "reference",
														"name": "AccessibilityTrait"
													},
													{
														"type": "array",
														"elementType": {
															"type": "reference",
															"name": "AccessibilityTrait"
														}
													}
												]
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.accessibilityTraits"
											}
										},
										{
											"id": 462,
											"name": "accessibilityValue",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Represents the current value of a component. It can be a textual description of a component's value, or for range-based components, such as sliders and progress bars,\nit contains range information (minimum, current, and maximum)."
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2086,
													"character": 4
												}
											],
											"type": {
												"type": "reference",
												"name": "AccessibilityValue"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.accessibilityValue"
											}
										},
										{
											"id": 471,
											"name": "accessibilityViewIsModal",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.",
												"tags": [
													{
														"tag": "platform",
														"text": "ios\n"
													}
												]
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2259,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.accessibilityViewIsModal"
											}
										},
										{
											"id": 453,
											"name": "accessible",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "When true, indicates that the view is an accessibility element.\nBy default, all the touchable elements are accessible."
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2057,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.accessible"
											}
										},
										{
											"id": 479,
											"name": "appearance",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@ui-kitten/components/theme/style/styled.d.ts",
													"line": 14,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "StyledComponentProps.appearance"
											}
										},
										{
											"id": 380,
											"name": "children",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/components/atom/safe-area-layout.tsx",
													"line": 29,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"name": "ReactNode"
											}
										},
										{
											"id": 390,
											"name": "collapsable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Views that are only used to layout their children or otherwise don't draw anything\nmay be automatically removed from the native hierarchy as an optimization.\nSet this property to false to disable this optimization and ensure that this View exists in the native view hierarchy."
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2010,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.collapsable"
											}
										},
										{
											"id": 480,
											"name": "eva",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@ui-kitten/components/theme/style/styled.d.ts",
													"line": 15,
													"character": 4
												}
											],
											"type": {
												"type": "reference",
												"name": "EvaProp"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "StyledComponentProps.eva"
											}
										},
										{
											"id": 393,
											"name": "focusable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Whether this `View` should be focusable with a non-touch input device, eg. receive focus with a hardware keyboard."
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2040,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.focusable"
											}
										},
										{
											"id": 396,
											"name": "hasTVPreferredFocus",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "*(Apple TV only)* May be set to true to force the Apple TV focus engine to move focus to this view.",
												"tags": [
													{
														"tag": "platform",
														"text": "ios\n"
													}
												]
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 1952,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.hasTVPreferredFocus"
											}
										},
										{
											"id": 381,
											"name": "hitSlop",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "This defines how far a touch event can start away from the view.\nTypical interface guidelines recommend touch targets that are at least\n30 - 40 points/density-independent pixels. If a Touchable view has\na height of 20 the touchable height can be extended to 40 with\nhitSlop={{top: 10, bottom: 10, left: 0, right: 0}}\nNOTE The touch area never extends past the parent view bounds and\nthe Z-index of sibling views always takes precedence if a touch\nhits two overlapping views."
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2324,
													"character": 4
												}
											],
											"type": {
												"type": "reference",
												"name": "Insets"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.hitSlop"
											}
										},
										{
											"id": 468,
											"name": "importantForAccessibility",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Controls how view is important for accessibility which is if it fires accessibility events\nand if it is reported to accessibility services that query the screen.\nWorks for Android only. See http://developer.android.com/reference/android/R.attr.html#importantForAccessibility for references.",
												"text": "Possible values:\n     'auto' - The system determines whether the view is important for accessibility - default (recommended).\n     'yes' - The view is important for accessibility.\n     'no' - The view is not important for accessibility.\n     'no-hide-descendants' - The view is not important for accessibility, nor are any of its descendant views.\n"
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2237,
													"character": 4
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "auto"
													},
													{
														"type": "literal",
														"value": "yes"
													},
													{
														"type": "literal",
														"value": "no"
													},
													{
														"type": "literal",
														"value": "no-hide-descendants"
													}
												]
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.importantForAccessibility"
											}
										},
										{
											"id": 379,
											"name": "insets",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "src/components/atom/safe-area-layout.tsx",
													"line": 28,
													"character": 2
												}
											],
											"type": {
												"type": "reference",
												"name": "Inset"
											}
										},
										{
											"id": 395,
											"name": "isTVSelectable",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "*(Apple TV only)* When set to true, this view will be focusable\nand navigable using the Apple TV remote.",
												"tags": [
													{
														"tag": "platform",
														"text": "ios\n"
													}
												]
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 1945,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.isTVSelectable"
											}
										},
										{
											"id": 389,
											"name": "nativeID",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Used to reference react managed views from native code."
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2376,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.nativeID"
											}
										},
										{
											"id": 391,
											"name": "needsOffscreenAlphaCompositing",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Whether this view needs to rendered offscreen and composited with an alpha in order to preserve 100% correct colors and blending behavior.\nThe default (false) falls back to drawing the component and its children\nwith an alpha applied to the paint used to draw each element instead of rendering the full component offscreen and compositing it back with an alpha value.\nThis default may be noticeable and undesired in the case where the View you are setting an opacity on\nhas multiple overlapping elements (e.g. multiple overlapping Views, or text and a background).",
												"text": "Rendering offscreen to preserve correct alpha behavior is extremely expensive\nand hard to debug for non-native developers, which is why it is not turned on by default.\nIf you do need to enable this property for an animation,\nconsider combining it with renderToHardwareTextureAndroid if the view contents are static (i.e. it doesn't need to be redrawn each frame).\nIf that property is enabled, this View will be rendered off-screen once,\nsaved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.\n"
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2026,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.needsOffscreenAlphaCompositing"
											}
										},
										{
											"id": 385,
											"name": "pointerEvents",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "In the absence of auto property, none is much like CSS's none value. box-none is as if you had applied the CSS class:",
												"text": ".box-none {\n  pointer-events: none;\n}\n.box-none * {\n  pointer-events: all;\n}\n\nbox-only is the equivalent of\n\n.box-only {\n  pointer-events: all;\n}\n.box-only * {\n  pointer-events: none;\n}\n\nBut since pointerEvents does not affect layout/appearance, and we are already deviating from the spec by adding additional modes,\nwe opt to not include pointerEvents on style. On some platforms, we would need to implement it as a className anyways. Using style or not is an implementation detail of the platform.\n"
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2356,
													"character": 4
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "box-none"
													},
													{
														"type": "literal",
														"value": "none"
													},
													{
														"type": "literal",
														"value": "box-only"
													},
													{
														"type": "literal",
														"value": "auto"
													}
												]
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.pointerEvents"
											}
										},
										{
											"id": 386,
											"name": "removeClippedSubviews",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "This is a special performance property exposed by RCTView and is useful for scrolling content when there are many subviews,\nmost of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound.\nThe subviews must also have overflow: hidden, as should the containing view (or one of its superviews)."
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2364,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.removeClippedSubviews"
											}
										},
										{
											"id": 392,
											"name": "renderToHardwareTextureAndroid",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Whether this view should render itself (and all of its children) into a single hardware texture on the GPU.",
												"text": "On Android, this is useful for animations and interactions that only modify opacity, rotation, translation, and/or scale:\nin those cases, the view doesn't have to be redrawn and display lists don't need to be re-executed. The texture can just be\nre-used and re-composited with different parameters. The downside is that this can use up limited video memory, so this prop should be set back to false at the end of the interaction/animation.\n"
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2035,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.renderToHardwareTextureAndroid"
											}
										},
										{
											"id": 394,
											"name": "shouldRasterizeIOS",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Whether this view should be rendered as a bitmap before compositing.",
												"text": "On iOS, this is useful for animations and interactions that do not modify this component's dimensions nor its children;\nfor example, when translating the position of a static view, rasterization allows the renderer to reuse a cached bitmap of a static view\nand quickly composite it during each frame.\n\nRasterization incurs an off-screen drawing pass and the bitmap consumes memory.\nTest and measure when using this property.\n"
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2001,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.shouldRasterizeIOS"
											}
										},
										{
											"id": 387,
											"name": "style",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2366,
													"character": 4
												}
											],
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "ViewStyle"
													}
												],
												"name": "StyleProp"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.style"
											}
										},
										{
											"id": 388,
											"name": "testID",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Used to locate this view in end-to-end tests."
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2371,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.testID"
											}
										},
										{
											"id": 401,
											"name": "tvParallaxMagnification",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 1.0.",
												"tags": [
													{
														"tag": "platform",
														"text": "ios\n"
													}
												]
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 1987,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.tvParallaxMagnification"
											}
										},
										{
											"id": 397,
											"name": "tvParallaxProperties",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "*(Apple TV only)* Object with properties to control Apple TV parallax effects.",
												"tags": [
													{
														"tag": "platform",
														"text": "ios\n"
													}
												]
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 1959,
													"character": 4
												}
											],
											"type": {
												"type": "reference",
												"name": "TVParallaxProperties"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.tvParallaxProperties"
											}
										},
										{
											"id": 398,
											"name": "tvParallaxShiftDistanceX",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
												"tags": [
													{
														"tag": "platform",
														"text": "ios\n"
													}
												]
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 1966,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.tvParallaxShiftDistanceX"
											}
										},
										{
											"id": 399,
											"name": "tvParallaxShiftDistanceY",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 2.0.",
												"tags": [
													{
														"tag": "platform",
														"text": "ios\n"
													}
												]
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 1973,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.tvParallaxShiftDistanceY"
											}
										},
										{
											"id": 400,
											"name": "tvParallaxTiltAngle",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "*(Apple TV only)* May be used to change the appearance of the Apple TV parallax effect when this view goes in or out of focus.  Defaults to 0.05.",
												"tags": [
													{
														"tag": "platform",
														"text": "ios\n"
													}
												]
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 1980,
													"character": 4
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.tvParallaxTiltAngle"
											}
										},
										{
											"id": 463,
											"name": "onAccessibilityAction",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2091,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 464,
													"name": "onAccessibilityAction",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "When `accessible` is true, the system will try to invoke this function when the user performs an accessibility custom action."
													},
													"parameters": [
														{
															"id": 465,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "AccessibilityActionEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onAccessibilityAction"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onAccessibilityAction"
											}
										},
										{
											"id": 472,
											"name": "onAccessibilityEscape",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2265,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 473,
													"name": "onAccessibilityEscape",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "When accessibile is true, the system will invoke this function when the user performs the escape gesture (scrub with two fingers).",
														"tags": [
															{
																"tag": "platform",
																"text": "ios\n"
															}
														]
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onAccessibilityEscape"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onAccessibilityEscape"
											}
										},
										{
											"id": 474,
											"name": "onAccessibilityTap",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2271,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 475,
													"name": "onAccessibilityTap",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "When `accessible` is true, the system will try to invoke this function when the user performs accessibility tap gesture.",
														"tags": [
															{
																"tag": "platform",
																"text": "ios\n"
															}
														]
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onAccessibilityTap"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onAccessibilityTap"
											}
										},
										{
											"id": 382,
											"name": "onLayout",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2331,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 383,
													"name": "onLayout",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Invoked on mount and layout changes with",
														"text": "{nativeEvent: { layout: {x, y, width, height}}}.\n"
													},
													"parameters": [
														{
															"id": 384,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "LayoutChangeEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onLayout"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onLayout"
											}
										},
										{
											"id": 476,
											"name": "onMagicTap",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 2277,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 477,
													"name": "onMagicTap",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "When accessible is true, the system will invoke this function when the user performs the magic tap gesture.",
														"tags": [
															{
																"tag": "platform",
																"text": "ios\n"
															}
														]
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onMagicTap"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onMagicTap"
											}
										},
										{
											"id": 405,
											"name": "onMoveShouldSetResponder",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 1775,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 406,
													"name": "onMoveShouldSetResponder",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Called for every touch move on the View when it is not the responder: does this view want to \"claim\" touch responsiveness?"
													},
													"parameters": [
														{
															"id": 407,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "GestureResponderEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onMoveShouldSetResponder"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onMoveShouldSetResponder"
											}
										},
										{
											"id": 435,
											"name": "onMoveShouldSetResponderCapture",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 1851,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 436,
													"name": "onMoveShouldSetResponderCapture",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.",
														"text": "However, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.\n"
													},
													"parameters": [
														{
															"id": 437,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "GestureResponderEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onMoveShouldSetResponderCapture"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onMoveShouldSetResponderCapture"
											}
										},
										{
											"id": 408,
											"name": "onResponderEnd",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 1781,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 409,
													"name": "onResponderEnd",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "If the View returns true and attempts to become the responder, one of the following will happen:"
													},
													"parameters": [
														{
															"id": 410,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "GestureResponderEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onResponderEnd"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onResponderEnd"
											}
										},
										{
											"id": 411,
											"name": "onResponderGrant",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 1787,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 412,
													"name": "onResponderGrant",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "The View is now responding for touch events.\nThis is the time to highlight and show the user what is happening"
													},
													"parameters": [
														{
															"id": 413,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "GestureResponderEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onResponderGrant"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onResponderGrant"
											}
										},
										{
											"id": 417,
											"name": "onResponderMove",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 1801,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 418,
													"name": "onResponderMove",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "The user is moving their finger"
													},
													"parameters": [
														{
															"id": 419,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "GestureResponderEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onResponderMove"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onResponderMove"
											}
										},
										{
											"id": 414,
											"name": "onResponderReject",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 1792,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 415,
													"name": "onResponderReject",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Something else is the responder right now and will not release it"
													},
													"parameters": [
														{
															"id": 416,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "GestureResponderEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onResponderReject"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onResponderReject"
											}
										},
										{
											"id": 420,
											"name": "onResponderRelease",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 1806,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 421,
													"name": "onResponderRelease",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Fired at the end of the touch, ie \"touchUp\""
													},
													"parameters": [
														{
															"id": 422,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "GestureResponderEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onResponderRelease"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onResponderRelease"
											}
										},
										{
											"id": 423,
											"name": "onResponderStart",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 1808,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 424,
													"name": "onResponderStart",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 425,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "GestureResponderEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onResponderStart"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onResponderStart"
											}
										},
										{
											"id": 429,
											"name": "onResponderTerminate",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 1821,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 430,
													"name": "onResponderTerminate",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "The responder has been taken from the View.\nMight be taken by other views after a call to onResponderTerminationRequest,\nor might be taken by the OS without asking (happens with control center/ notification center on iOS)"
													},
													"parameters": [
														{
															"id": 431,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "GestureResponderEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onResponderTerminate"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onResponderTerminate"
											}
										},
										{
											"id": 426,
											"name": "onResponderTerminationRequest",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 1814,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 427,
													"name": "onResponderTerminationRequest",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": " Something else wants to become responder.\n Should this view release the responder? Returning true allows release"
													},
													"parameters": [
														{
															"id": 428,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "GestureResponderEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onResponderTerminationRequest"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onResponderTerminationRequest"
											}
										},
										{
											"id": 402,
											"name": "onStartShouldSetResponder",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 1770,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 403,
													"name": "onStartShouldSetResponder",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Does this view want to become responder on the start of a touch?"
													},
													"parameters": [
														{
															"id": 404,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "GestureResponderEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onStartShouldSetResponder"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onStartShouldSetResponder"
											}
										},
										{
											"id": 432,
											"name": "onStartShouldSetResponderCapture",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 1836,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 433,
													"name": "onStartShouldSetResponderCapture",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "onStartShouldSetResponder and onMoveShouldSetResponder are called with a bubbling pattern,\nwhere the deepest node is called first.\nThat means that the deepest component will become responder when multiple Views return true for *ShouldSetResponder handlers.\nThis is desirable in most cases, because it makes sure all controls and buttons are usable.",
														"text": "However, sometimes a parent will want to make sure that it becomes responder.\nThis can be handled by using the capture phase.\nBefore the responder system bubbles up from the deepest component,\nit will do a capture phase, firing on*ShouldSetResponderCapture.\nSo if a parent View wants to prevent the child from becoming responder on a touch start,\nit should have a onStartShouldSetResponderCapture handler which returns true.\n"
													},
													"parameters": [
														{
															"id": 434,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "GestureResponderEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "boolean"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onStartShouldSetResponderCapture"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onStartShouldSetResponderCapture"
											}
										},
										{
											"id": 447,
											"name": "onTouchCancel",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 479,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 448,
													"name": "onTouchCancel",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 449,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "GestureResponderEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onTouchCancel"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onTouchCancel"
											}
										},
										{
											"id": 444,
											"name": "onTouchEnd",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 478,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 445,
													"name": "onTouchEnd",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 446,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "GestureResponderEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onTouchEnd"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onTouchEnd"
											}
										},
										{
											"id": 450,
											"name": "onTouchEndCapture",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 480,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 451,
													"name": "onTouchEndCapture",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 452,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "GestureResponderEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onTouchEndCapture"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onTouchEndCapture"
											}
										},
										{
											"id": 441,
											"name": "onTouchMove",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 477,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 442,
													"name": "onTouchMove",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 443,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "GestureResponderEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onTouchMove"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onTouchMove"
											}
										},
										{
											"id": 438,
											"name": "onTouchStart",
											"kind": 2048,
											"kindString": "Method",
											"flags": {
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/@types/react-native/index.d.ts",
													"line": 476,
													"character": 4
												}
											],
											"signatures": [
												{
													"id": 439,
													"name": "onTouchStart",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 440,
															"name": "event",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"name": "GestureResponderEvent"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													},
													"inheritedFrom": {
														"type": "reference",
														"name": "ViewProps.onTouchStart"
													}
												}
											],
											"inheritedFrom": {
												"type": "reference",
												"name": "ViewProps.onTouchStart"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												454,
												466,
												469,
												461,
												478,
												458,
												467,
												459,
												460,
												470,
												462,
												471,
												453,
												479,
												380,
												390,
												480,
												393,
												396,
												381,
												468,
												379,
												395,
												389,
												391,
												385,
												386,
												392,
												394,
												387,
												388,
												401,
												397,
												398,
												399,
												400
											]
										},
										{
											"title": "Methods",
											"kind": 2048,
											"children": [
												463,
												472,
												474,
												382,
												476,
												405,
												435,
												408,
												411,
												417,
												414,
												420,
												423,
												429,
												426,
												402,
												432,
												447,
												444,
												450,
												441,
												438
											]
										}
									],
									"sources": [
										{
											"fileName": "src/components/atom/safe-area-layout.tsx",
											"line": 27,
											"character": 17
										}
									],
									"extendedTypes": [
										{
											"type": "reference",
											"name": "ViewProps"
										},
										{
											"type": "reference",
											"name": "StyledComponentProps"
										}
									]
								},
								{
									"id": 580,
									"name": "SafeAreaLayout",
									"kind": 32,
									"kindString": "Variable",
									"flags": {},
									"sources": [
										{
											"fileName": "src/components/atom/safe-area-layout.tsx",
											"line": 66,
											"character": 13
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Classes",
									"kind": 128,
									"children": [
										481
									]
								},
								{
									"title": "Interfaces",
									"kind": 256,
									"children": [
										378
									]
								},
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										580
									]
								}
							],
							"sources": [
								{
									"fileName": "src/components/atom/safe-area-layout.tsx",
									"line": 1,
									"character": 0
								}
							]
						},
						{
							"id": 584,
							"name": "view",
							"kind": 128,
							"kindString": "Class",
							"flags": {},
							"comment": {
								"shortText": "Overall page container.",
								"tags": [
									{
										"tag": "property",
										"text": "{ReactNode} children - Component to render within the layout.\n"
									},
									{
										"tag": "property",
										"text": "{string} level - Background color level of component.\nCan be `1`, `2`, `3` or `4`.\nDefaults to *1*.\n"
									},
									{
										"tag": "property",
										"text": "{ViewProps} ...ViewProps - Any props applied to View component.\n"
									},
									{
										"tag": "overview-example",
										"text": "LayoutLevel\nLayout should be used as a root component of the screen.\nComparative to `View` element, it uses a background color with respect to current theme.\nUsing Layout is redundant, when background color is configured with `style` property.\n\nLayouts can be used in different levels.\nIt is useful, when needed to highlight the container relative to another.\n"
									}
								]
							},
							"children": [
								{
									"id": 586,
									"name": "constructor",
									"kind": 512,
									"kindString": "Constructor",
									"flags": {},
									"signatures": [
										{
											"id": 587,
											"name": "new view",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"parameters": [
												{
													"id": 588,
													"name": "props",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"name": "LayoutProps"
															},
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reference",
																		"name": "LayoutProps"
																	}
																],
																"name": "Readonly"
															}
														]
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 584,
												"name": "Layout"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component<LayoutProps>.constructor"
											}
										},
										{
											"id": 589,
											"name": "new view",
											"kind": 16384,
											"kindString": "Constructor signature",
											"flags": {},
											"comment": {
												"tags": [
													{
														"tag": "deprecated",
														"text": ""
													},
													{
														"tag": "see",
														"text": "https://reactjs.org/docs/legacy-context.html\n"
													}
												]
											},
											"parameters": [
												{
													"id": 590,
													"name": "props",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "LayoutProps"
													}
												},
												{
													"id": 591,
													"name": "context",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "reference",
												"id": 584,
												"name": "Layout"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component<LayoutProps>.constructor"
											}
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component<LayoutProps>.constructor"
									}
								},
								{
									"id": 594,
									"name": "context",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"shortText": "If using the new style context, re-declare this in your class to be the\n`React.ContextType` of your `static contextType`.\nShould be used with type annotation or static contextType.",
										"text": "```ts\nstatic contextType = MyContext\n// For TS pre-3.7:\ncontext!: React.ContextType<typeof MyContext>\n// For TS 3.7 and above:\ndeclare context: React.ContextType<typeof MyContext>\n```\n",
										"tags": [
											{
												"tag": "see",
												"text": "https://reactjs.org/docs/context.html\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/react/index.d.ts",
											"line": 472,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "any"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component.context"
									}
								},
								{
									"id": 616,
									"name": "props",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isReadonly": true
									},
									"sources": [
										{
											"fileName": "node_modules/@types/react/index.d.ts",
											"line": 497,
											"character": 17
										}
									],
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "LayoutProps"
													}
												],
												"name": "Readonly"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reflection",
														"declaration": {
															"id": 617,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"children": [
																{
																	"id": 618,
																	"name": "children",
																	"kind": 1024,
																	"kindString": "Property",
																	"flags": {
																		"isOptional": true
																	},
																	"sources": [
																		{
																			"fileName": "node_modules/@types/react/index.d.ts",
																			"line": 497,
																			"character": 49
																		}
																	],
																	"type": {
																		"type": "reference",
																		"name": "ReactNode"
																	}
																}
															],
															"groups": [
																{
																	"title": "Properties",
																	"kind": 1024,
																	"children": [
																		618
																	]
																}
															]
														}
													}
												],
												"name": "Readonly"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component.props"
									}
								},
								{
									"id": 621,
									"name": "refs",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "deprecated",
												"text": "\nhttps://reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/react/index.d.ts",
											"line": 503,
											"character": 8
										}
									],
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 622,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 623,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 624,
														"name": "key",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "reference",
													"name": "ReactInstance"
												}
											}
										}
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component.refs"
									}
								},
								{
									"id": 619,
									"name": "state",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "node_modules/@types/react/index.d.ts",
											"line": 498,
											"character": 8
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 620,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {}
												}
											}
										],
										"name": "Readonly"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component.state"
									}
								},
								{
									"id": 585,
									"name": "contextType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isStatic": true,
										"isOptional": true
									},
									"comment": {
										"shortText": "If set, `this.context` will be set at runtime to the current value of the given Context.",
										"text": "Usage:\n\n```ts\ntype MyContext = number\nconst Ctx = React.createContext<MyContext>(0)\n\nclass Foo extends React.Component {\n  static contextType = Ctx\n  context!: React.ContextType<typeof Ctx>\n  render () {\n    return <>My context's value: {this.context}</>;\n  }\n}\n```\n",
										"tags": [
											{
												"tag": "see",
												"text": "https://reactjs.org/docs/context.html#classcontexttype\n"
											}
										]
									},
									"sources": [
										{
											"fileName": "node_modules/@types/react/index.d.ts",
											"line": 454,
											"character": 15
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Context"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component.contextType"
									}
								},
								{
									"id": 652,
									"name": "UNSAFE_componentWillMount",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isOptional": true
									},
									"signatures": [
										{
											"id": 653,
											"name": "UNSAFE_componentWillMount",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
												"text": "This method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
												"tags": [
													{
														"tag": "deprecated",
														"text": "16.3, use componentDidMount or the constructor instead"
													},
													{
														"tag": "see",
														"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
													},
													{
														"tag": "see",
														"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "void"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.UNSAFE_componentWillMount"
											}
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component.UNSAFE_componentWillMount"
									}
								},
								{
									"id": 658,
									"name": "UNSAFE_componentWillReceiveProps",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isOptional": true
									},
									"signatures": [
										{
											"id": 659,
											"name": "UNSAFE_componentWillReceiveProps",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
												"text": "Calling `Component#setState` generally does not trigger this method.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
												"tags": [
													{
														"tag": "deprecated",
														"text": "16.3, use static getDerivedStateFromProps instead"
													},
													{
														"tag": "see",
														"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
													},
													{
														"tag": "see",
														"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
													}
												]
											},
											"parameters": [
												{
													"id": 660,
													"name": "nextProps",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "LayoutProps"
															}
														],
														"name": "Readonly"
													}
												},
												{
													"id": 661,
													"name": "nextContext",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.UNSAFE_componentWillReceiveProps"
											}
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component.UNSAFE_componentWillReceiveProps"
									}
								},
								{
									"id": 668,
									"name": "UNSAFE_componentWillUpdate",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isOptional": true
									},
									"signatures": [
										{
											"id": 669,
											"name": "UNSAFE_componentWillUpdate",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
												"text": "Note: You cannot call `Component#setState` here.\n\nThis method will not stop working in React 17.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
												"tags": [
													{
														"tag": "deprecated",
														"text": "16.3, use getSnapshotBeforeUpdate instead"
													},
													{
														"tag": "see",
														"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
													},
													{
														"tag": "see",
														"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
													}
												]
											},
											"parameters": [
												{
													"id": 670,
													"name": "nextProps",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "LayoutProps"
															}
														],
														"name": "Readonly"
													}
												},
												{
													"id": 671,
													"name": "nextState",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reflection",
																"declaration": {
																	"id": 672,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {}
																}
															}
														],
														"name": "Readonly"
													}
												},
												{
													"id": 673,
													"name": "nextContext",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.UNSAFE_componentWillUpdate"
											}
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component.UNSAFE_componentWillUpdate"
									}
								},
								{
									"id": 635,
									"name": "componentDidCatch",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isOptional": true
									},
									"signatures": [
										{
											"id": 636,
											"name": "componentDidCatch",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Catches exceptions generated in descendant components. Unhandled exceptions will cause\nthe entire component tree to unmount."
											},
											"parameters": [
												{
													"id": 637,
													"name": "error",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "Error"
													}
												},
												{
													"id": 638,
													"name": "errorInfo",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "ErrorInfo"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.componentDidCatch"
											}
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component.componentDidCatch"
									}
								},
								{
									"id": 625,
									"name": "componentDidMount",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isOptional": true
									},
									"signatures": [
										{
											"id": 626,
											"name": "componentDidMount",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Called immediately after a component is mounted. Setting state here will trigger re-rendering."
											},
											"type": {
												"type": "intrinsic",
												"name": "void"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.componentDidMount"
											}
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component.componentDidMount"
									}
								},
								{
									"id": 644,
									"name": "componentDidUpdate",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isOptional": true
									},
									"signatures": [
										{
											"id": 645,
											"name": "componentDidUpdate",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Called immediately after updating occurs. Not called for the initial render.",
												"text": "The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n"
											},
											"parameters": [
												{
													"id": 646,
													"name": "prevProps",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "LayoutProps"
															}
														],
														"name": "Readonly"
													}
												},
												{
													"id": 647,
													"name": "prevState",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reflection",
																"declaration": {
																	"id": 648,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {}
																}
															}
														],
														"name": "Readonly"
													}
												},
												{
													"id": 649,
													"name": "snapshot",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.componentDidUpdate"
											}
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component.componentDidUpdate"
									}
								},
								{
									"id": 650,
									"name": "componentWillMount",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isOptional": true
									},
									"signatures": [
										{
											"id": 651,
											"name": "componentWillMount",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Called immediately before mounting occurs, and before `Component#render`.\nAvoid introducing any side-effects or subscriptions in this method.",
												"text": "Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
												"tags": [
													{
														"tag": "deprecated",
														"text": "16.3, use componentDidMount or the constructor instead; will stop working in React 17"
													},
													{
														"tag": "see",
														"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state"
													},
													{
														"tag": "see",
														"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
													}
												]
											},
											"type": {
												"type": "intrinsic",
												"name": "void"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.componentWillMount"
											}
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component.componentWillMount"
									}
								},
								{
									"id": 654,
									"name": "componentWillReceiveProps",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isOptional": true
									},
									"signatures": [
										{
											"id": 655,
											"name": "componentWillReceiveProps",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Called when the component may be receiving new props.\nReact may call this even if props have not changed, so be sure to compare new and existing\nprops if you only want to handle changes.",
												"text": "Calling `Component#setState` generally does not trigger this method.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
												"tags": [
													{
														"tag": "deprecated",
														"text": "16.3, use static getDerivedStateFromProps instead; will stop working in React 17"
													},
													{
														"tag": "see",
														"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props"
													},
													{
														"tag": "see",
														"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
													}
												]
											},
											"parameters": [
												{
													"id": 656,
													"name": "nextProps",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "LayoutProps"
															}
														],
														"name": "Readonly"
													}
												},
												{
													"id": 657,
													"name": "nextContext",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.componentWillReceiveProps"
											}
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component.componentWillReceiveProps"
									}
								},
								{
									"id": 633,
									"name": "componentWillUnmount",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isOptional": true
									},
									"signatures": [
										{
											"id": 634,
											"name": "componentWillUnmount",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\ncancelled network requests, or cleaning up any DOM elements created in `componentDidMount`."
											},
											"type": {
												"type": "intrinsic",
												"name": "void"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.componentWillUnmount"
											}
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component.componentWillUnmount"
									}
								},
								{
									"id": 662,
									"name": "componentWillUpdate",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isOptional": true
									},
									"signatures": [
										{
											"id": 663,
											"name": "componentWillUpdate",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Called immediately before rendering when new props or state is received. Not called for the initial render.",
												"text": "Note: You cannot call `Component#setState` here.\n\nNote: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\nprevents this from being invoked.\n",
												"tags": [
													{
														"tag": "deprecated",
														"text": "16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17"
													},
													{
														"tag": "see",
														"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update"
													},
													{
														"tag": "see",
														"text": "https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n"
													}
												]
											},
											"parameters": [
												{
													"id": 664,
													"name": "nextProps",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "LayoutProps"
															}
														],
														"name": "Readonly"
													}
												},
												{
													"id": 665,
													"name": "nextState",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reflection",
																"declaration": {
																	"id": 666,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {}
																}
															}
														],
														"name": "Readonly"
													}
												},
												{
													"id": 667,
													"name": "nextContext",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.componentWillUpdate"
											}
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component.componentWillUpdate"
									}
								},
								{
									"id": 611,
									"name": "forceUpdate",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "node_modules/@types/react/index.d.ts",
											"line": 489,
											"character": 8
										}
									],
									"signatures": [
										{
											"id": 612,
											"name": "forceUpdate",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 613,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 614,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 615,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.forceUpdate"
											}
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component.forceUpdate"
									}
								},
								{
									"id": 639,
									"name": "getSnapshotBeforeUpdate",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isOptional": true
									},
									"signatures": [
										{
											"id": 640,
											"name": "getSnapshotBeforeUpdate",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Runs before React applies the result of `render` to the document, and\nreturns an object to be given to componentDidUpdate. Useful for saving\nthings such as scroll position before `render` causes changes to it.",
												"text": "Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\nlifecycle events from running.\n"
											},
											"parameters": [
												{
													"id": 641,
													"name": "prevProps",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "LayoutProps"
															}
														],
														"name": "Readonly"
													}
												},
												{
													"id": 642,
													"name": "prevState",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reflection",
																"declaration": {
																	"id": 643,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {}
																}
															}
														],
														"name": "Readonly"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "any"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.getSnapshotBeforeUpdate"
											}
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component.getSnapshotBeforeUpdate"
									}
								},
								{
									"id": 592,
									"name": "render",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "node_modules/@ui-kitten/components/ui/layout/layout.component.d.ts",
											"line": 40,
											"character": 4
										}
									],
									"signatures": [
										{
											"id": 593,
											"name": "render",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"name": "ViewProps"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																],
																"name": "JSXElementConstructor"
															}
														]
													}
												],
												"name": "ReactElement"
											},
											"overwrites": {
												"type": "reference",
												"name": "React.Component.render"
											}
										}
									],
									"overwrites": {
										"type": "reference",
										"name": "React.Component.render"
									}
								},
								{
									"id": 595,
									"name": "setState",
									"kind": 2048,
									"kindString": "Method",
									"flags": {},
									"sources": [
										{
											"fileName": "node_modules/@types/react/index.d.ts",
											"line": 484,
											"character": 8
										}
									],
									"signatures": [
										{
											"id": 596,
											"name": "setState",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"typeParameter": [
												{
													"id": 597,
													"name": "K",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "never"
													}
												}
											],
											"parameters": [
												{
													"id": 598,
													"name": "state",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": null
															},
															{
																"type": "reflection",
																"declaration": {
																	"id": 599,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {}
																}
															},
															{
																"type": "reflection",
																"declaration": {
																	"id": 600,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"signatures": [
																		{
																			"id": 601,
																			"name": "__type",
																			"kind": 4096,
																			"kindString": "Call signature",
																			"flags": {},
																			"parameters": [
																				{
																					"id": 602,
																					"name": "prevState",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "reflection",
																								"declaration": {
																									"id": 603,
																									"name": "__type",
																									"kind": 65536,
																									"kindString": "Type literal",
																									"flags": {}
																								}
																							}
																						],
																						"name": "Readonly"
																					}
																				},
																				{
																					"id": 604,
																					"name": "props",
																					"kind": 32768,
																					"kindString": "Parameter",
																					"flags": {},
																					"type": {
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "reference",
																								"name": "LayoutProps"
																							}
																						],
																						"name": "Readonly"
																					}
																				}
																			],
																			"type": {
																				"type": "union",
																				"types": [
																					{
																						"type": "literal",
																						"value": null
																					},
																					{
																						"type": "reflection",
																						"declaration": {
																							"id": 605,
																							"name": "__type",
																							"kind": 65536,
																							"kindString": "Type literal",
																							"flags": {}
																						}
																					},
																					{
																						"type": "reference",
																						"typeArguments": [
																							{
																								"type": "reflection",
																								"declaration": {
																									"id": 606,
																									"name": "__type",
																									"kind": 65536,
																									"kindString": "Type literal",
																									"flags": {}
																								}
																							},
																							{
																								"type": "reference",
																								"id": 503,
																								"name": "K"
																							}
																						],
																						"name": "Pick"
																					}
																				]
																			}
																		}
																	]
																}
															},
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 607,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {}
																		}
																	},
																	{
																		"type": "reference",
																		"id": 503,
																		"name": "K"
																	}
																],
																"name": "Pick"
															}
														]
													}
												},
												{
													"id": 608,
													"name": "callback",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {
														"isOptional": true
													},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 609,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 610,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "void"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.setState"
											}
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component.setState"
									}
								},
								{
									"id": 627,
									"name": "shouldComponentUpdate",
									"kind": 2048,
									"kindString": "Method",
									"flags": {
										"isOptional": true
									},
									"signatures": [
										{
											"id": 628,
											"name": "shouldComponentUpdate",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"comment": {
												"shortText": "Called to determine whether the change in props and state should trigger a re-render.",
												"text": "`Component` always returns true.\n`PureComponent` implements a shallow comparison on props and state and returns true if any\nprops or states have changed.\n\nIf false is returned, `Component#render`, `componentWillUpdate`\nand `componentDidUpdate` will not be called.\n"
											},
											"parameters": [
												{
													"id": 629,
													"name": "nextProps",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "LayoutProps"
															}
														],
														"name": "Readonly"
													}
												},
												{
													"id": 630,
													"name": "nextState",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reflection",
																"declaration": {
																	"id": 631,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {}
																}
															}
														],
														"name": "Readonly"
													}
												},
												{
													"id": 632,
													"name": "nextContext",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "any"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											},
											"inheritedFrom": {
												"type": "reference",
												"name": "React.Component.shouldComponentUpdate"
											}
										}
									],
									"inheritedFrom": {
										"type": "reference",
										"name": "React.Component.shouldComponentUpdate"
									}
								}
							],
							"groups": [
								{
									"title": "Constructors",
									"kind": 512,
									"children": [
										586
									]
								},
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										594,
										616,
										621,
										619,
										585
									]
								},
								{
									"title": "Methods",
									"kind": 2048,
									"children": [
										652,
										658,
										668,
										635,
										625,
										644,
										650,
										654,
										633,
										662,
										611,
										639,
										592,
										595,
										627
									]
								}
							],
							"sources": [
								{
									"fileName": "node_modules/@ui-kitten/components/ui/layout/layout.component.d.ts",
									"line": 39,
									"character": 21
								}
							],
							"extendedTypes": [
								{
									"type": "reference",
									"typeArguments": [
										{
											"type": "reference",
											"name": "LayoutProps"
										}
									],
									"name": "Component"
								}
							]
						},
						{
							"id": 370,
							"name": "CellProps",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"comment": {
								"shortText": "## Cell 属性配置",
								"text": "通常我们可以将列表数据抽象为一个单独的配置文件，配置中的每一项包含 Cell 的完整配置信息，包括展示内容、交互行为等。具体定义请点击 CellData 进行查看。\n"
							},
							"sources": [
								{
									"fileName": "src/components/atom/cell.tsx",
									"line": 39,
									"character": 12
								}
							],
							"type": {
								"type": "intersection",
								"types": [
									{
										"type": "reference",
										"id": 116,
										"name": "CellData"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 371,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 372,
													"name": "index",
													"kind": 1024,
													"kindString": "Property",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/components/atom/cell.tsx",
															"line": 40,
															"character": 2
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "number"
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														372
													]
												}
											],
											"sources": [
												{
													"fileName": "src/components/atom/cell.tsx",
													"line": 39,
													"character": 35
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 374,
							"name": "loadingOverlay",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 375,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 376,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Element"
											}
										}
									]
								}
							}
						},
						{
							"id": 367,
							"name": "Cell",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "src/components/atom/cell.tsx",
									"line": 53,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 368,
									"name": "Cell",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "## Cell 组件",
										"text": "用于列表通用展示、交互内容的呈现。\n",
										"returns": "\n"
									},
									"parameters": [
										{
											"id": 369,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"id": 370,
												"name": "CellProps"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																],
																"name": "JSXElementConstructor"
															}
														]
													}
												],
												"name": "ReactElement"
											}
										]
									}
								}
							]
						},
						{
							"id": 581,
							"name": "text",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "src/components/atom/text.tsx",
									"line": 7,
									"character": 6
								}
							],
							"signatures": [
								{
									"id": 582,
									"name": "text",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 583,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "TextComponentProps"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Element"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "References",
							"kind": 16777216,
							"children": [
								373
							]
						},
						{
							"title": "Namespaces",
							"kind": 4,
							"children": [
								377
							]
						},
						{
							"title": "Classes",
							"kind": 128,
							"children": [
								584
							]
						},
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								370
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								374
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								367,
								581
							]
						}
					],
					"sources": [
						{
							"fileName": "src/components/atom/index.ts",
							"line": 6,
							"character": 0
						}
					]
				},
				{
					"id": 674,
					"name": "view",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"comment": {
						"shortText": "View 主要涵盖通用的、与状态关联的组件，若一个组件与 Context、Manager、Store 等有关系，通常将其划分到此类别下。"
					},
					"children": [
						{
							"id": 675,
							"name": "cameraConnectModal",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/components/view/cameraConnectModal.tsx",
									"line": 111,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"name": "IProps"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "unknown"
													}
												],
												"name": "RefAttributes"
											}
										]
									}
								],
								"name": "ForwardRefExoticComponent"
							},
							"defaultValue": "..."
						},
						{
							"id": 676,
							"name": "cameraList",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "src/components/view/cameraList.tsx",
									"line": 35,
									"character": 6
								}
							],
							"signatures": [
								{
									"id": 677,
									"name": "cameraList",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 678,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IProps"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": null
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "any"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "reference",
																"typeArguments": [
																	{
																		"type": "intrinsic",
																		"name": "any"
																	}
																],
																"name": "JSXElementConstructor"
															}
														]
													}
												],
												"name": "ReactElement"
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								675
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								676
							]
						}
					],
					"sources": [
						{
							"fileName": "src/components/view/index.ts",
							"line": 6,
							"character": 0
						}
					]
				}
			],
			"groups": [
				{
					"title": "Namespaces",
					"kind": 4,
					"children": [
						366,
						674
					]
				}
			],
			"sources": [
				{
					"fileName": "src/components/index.ts",
					"line": 4,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "Module",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "RNC module entrance"
			},
			"originalName": "index",
			"children": [
				{
					"id": 112,
					"name": "CellType",
					"kind": 8,
					"kindString": "Enumeration",
					"flags": {},
					"comment": {
						"shortText": "Cell 类型"
					},
					"children": [
						{
							"id": 114,
							"name": "cell",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cell.ts",
									"line": 8,
									"character": 2
								}
							],
							"defaultValue": "\"cell\""
						},
						{
							"id": 113,
							"name": "sectionTitle",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cell.ts",
									"line": 7,
									"character": 2
								}
							],
							"defaultValue": "\"sectionTitle\""
						},
						{
							"id": 115,
							"name": "space",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cell.ts",
									"line": 9,
									"character": 2
								}
							],
							"defaultValue": "\"space\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								114,
								113,
								115
							]
						}
					],
					"sources": [
						{
							"fileName": "src/types/cell.ts",
							"line": 6,
							"character": 12
						}
					]
				},
				{
					"id": 103,
					"name": "EAutoLock",
					"kind": 8,
					"kindString": "Enumeration",
					"flags": {},
					"children": [
						{
							"id": 104,
							"name": "min1",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 45,
									"character": 2
								}
							],
							"defaultValue": "\"1min\""
						},
						{
							"id": 105,
							"name": "min3",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 46,
									"character": 2
								}
							],
							"defaultValue": "\"3min\""
						},
						{
							"id": 106,
							"name": "min5",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 47,
									"character": 2
								}
							],
							"defaultValue": "\"5min\""
						},
						{
							"id": 107,
							"name": "off",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 48,
									"character": 2
								}
							],
							"defaultValue": "\"Off\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								104,
								105,
								106,
								107
							]
						}
					],
					"sources": [
						{
							"fileName": "src/types/cameraSetting.ts",
							"line": 44,
							"character": 12
						}
					]
				},
				{
					"id": 91,
					"name": "EAutoOff",
					"kind": 8,
					"kindString": "Enumeration",
					"flags": {},
					"children": [
						{
							"id": 92,
							"name": "min1",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 29,
									"character": 2
								}
							],
							"defaultValue": "\"1min\""
						},
						{
							"id": 95,
							"name": "min10",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 32,
									"character": 2
								}
							],
							"defaultValue": "\"min10\""
						},
						{
							"id": 93,
							"name": "min3",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 30,
									"character": 2
								}
							],
							"defaultValue": "\"3min\""
						},
						{
							"id": 94,
							"name": "min5",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 31,
									"character": 2
								}
							],
							"defaultValue": "\"5min\""
						},
						{
							"id": 96,
							"name": "never",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 33,
									"character": 2
								}
							],
							"defaultValue": "\"never\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								92,
								95,
								93,
								94,
								96
							]
						}
					],
					"sources": [
						{
							"fileName": "src/types/cameraSetting.ts",
							"line": 28,
							"character": 12
						}
					]
				},
				{
					"id": 73,
					"name": "EDefaultShootingMode",
					"kind": 8,
					"kindString": "Enumeration",
					"flags": {},
					"children": [
						{
							"id": 74,
							"name": "last",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 3,
									"character": 2
								}
							],
							"defaultValue": "\"Last Mode\""
						},
						{
							"id": 77,
							"name": "last360Photo",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 6,
									"character": 2
								}
							],
							"defaultValue": "\"Last 360° Photo Mode\""
						},
						{
							"id": 78,
							"name": "last360Video",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 7,
									"character": 2
								}
							],
							"defaultValue": "\"Last 360° Video Mode\""
						},
						{
							"id": 75,
							"name": "lastPhoto",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 4,
									"character": 2
								}
							],
							"defaultValue": "\"Last Photo Mode\""
						},
						{
							"id": 76,
							"name": "listVideo",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 5,
									"character": 2
								}
							],
							"defaultValue": "\"Last Video Mode\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								74,
								77,
								78,
								75,
								76
							]
						}
					],
					"sources": [
						{
							"fileName": "src/types/cameraSetting.ts",
							"line": 2,
							"character": 12
						}
					]
				},
				{
					"id": 86,
					"name": "ELanguage",
					"kind": 8,
					"kindString": "Enumeration",
					"flags": {},
					"children": [
						{
							"id": 90,
							"name": "chinese",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 25,
									"character": 2
								}
							],
							"defaultValue": "\"Chinese\""
						},
						{
							"id": 87,
							"name": "english",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 22,
									"character": 2
								}
							],
							"defaultValue": "\"English\""
						},
						{
							"id": 89,
							"name": "german",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 24,
									"character": 2
								}
							],
							"defaultValue": "\"German\""
						},
						{
							"id": 88,
							"name": "japanese",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 23,
									"character": 2
								}
							],
							"defaultValue": "\"Japanese\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								90,
								87,
								89,
								88
							]
						}
					],
					"sources": [
						{
							"fileName": "src/types/cameraSetting.ts",
							"line": 21,
							"character": 12
						}
					]
				},
				{
					"id": 178,
					"name": "EMediaItemType",
					"kind": 8,
					"kindString": "Enumeration",
					"flags": {},
					"children": [
						{
							"id": 181,
							"name": "photo",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/media.ts",
									"line": 4,
									"character": 2
								}
							],
							"defaultValue": "\"photo\""
						},
						{
							"id": 183,
							"name": "photoIn360",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/media.ts",
									"line": 6,
									"character": 2
								}
							],
							"defaultValue": "\"photoIn360\""
						},
						{
							"id": 179,
							"name": "unknown",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/media.ts",
									"line": 2,
									"character": 2
								}
							],
							"defaultValue": "\"unknown\""
						},
						{
							"id": 180,
							"name": "video",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/media.ts",
									"line": 3,
									"character": 2
								}
							],
							"defaultValue": "\"video\""
						},
						{
							"id": 182,
							"name": "videoIn360",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/media.ts",
									"line": 5,
									"character": 2
								}
							],
							"defaultValue": "\"videoIn360\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								181,
								183,
								179,
								180,
								182
							]
						}
					],
					"sources": [
						{
							"fileName": "src/types/media.ts",
							"line": 1,
							"character": 12
						}
					]
				},
				{
					"id": 108,
					"name": "EOrientation",
					"kind": 8,
					"kindString": "Enumeration",
					"flags": {},
					"children": [
						{
							"id": 111,
							"name": "all",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 54,
									"character": 2
								}
							],
							"defaultValue": "\"All\""
						},
						{
							"id": 109,
							"name": "off",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 52,
									"character": 2
								}
							],
							"defaultValue": "\"Off\""
						},
						{
							"id": 110,
							"name": "vertically",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 53,
									"character": 2
								}
							],
							"defaultValue": "\"Vertically\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								111,
								109,
								110
							]
						}
					],
					"sources": [
						{
							"fileName": "src/types/cameraSetting.ts",
							"line": 51,
							"character": 12
						}
					]
				},
				{
					"id": 97,
					"name": "EScreenSaver",
					"kind": 8,
					"kindString": "Enumeration",
					"flags": {},
					"children": [
						{
							"id": 98,
							"name": "min1",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 37,
									"character": 2
								}
							],
							"defaultValue": "\"1min\""
						},
						{
							"id": 101,
							"name": "min10",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 40,
									"character": 2
								}
							],
							"defaultValue": "\"min10\""
						},
						{
							"id": 99,
							"name": "min3",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 38,
									"character": 2
								}
							],
							"defaultValue": "\"3min\""
						},
						{
							"id": 100,
							"name": "min5",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 39,
									"character": 2
								}
							],
							"defaultValue": "\"5min\""
						},
						{
							"id": 102,
							"name": "never",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 41,
									"character": 2
								}
							],
							"defaultValue": "\"never\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								98,
								101,
								99,
								100,
								102
							]
						}
					],
					"sources": [
						{
							"fileName": "src/types/cameraSetting.ts",
							"line": 36,
							"character": 12
						}
					]
				},
				{
					"id": 82,
					"name": "EShutterVoice",
					"kind": 8,
					"kindString": "Enumeration",
					"flags": {},
					"children": [
						{
							"id": 85,
							"name": "high",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 18,
									"character": 2
								}
							],
							"defaultValue": "\"High\""
						},
						{
							"id": 83,
							"name": "low",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 16,
									"character": 2
								}
							],
							"defaultValue": "\"Low\""
						},
						{
							"id": 84,
							"name": "normal",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 17,
									"character": 2
								}
							],
							"defaultValue": "\"Normal\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								85,
								83,
								84
							]
						}
					],
					"sources": [
						{
							"fileName": "src/types/cameraSetting.ts",
							"line": 15,
							"character": 12
						}
					]
				},
				{
					"id": 79,
					"name": "EVideoCompression",
					"kind": 8,
					"kindString": "Enumeration",
					"flags": {},
					"children": [
						{
							"id": 80,
							"name": "h264",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 11,
									"character": 2
								}
							],
							"defaultValue": "\"H.264\""
						},
						{
							"id": 81,
							"name": "h265",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cameraSetting.ts",
									"line": 12,
									"character": 2
								}
							],
							"defaultValue": "\"HEVC(H.265)\""
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								80,
								81
							]
						}
					],
					"sources": [
						{
							"fileName": "src/types/cameraSetting.ts",
							"line": 10,
							"character": 12
						}
					]
				},
				{
					"id": 116,
					"name": "CellData",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Cell 配置数据"
					},
					"children": [
						{
							"id": 127,
							"name": "badge",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "右侧显示的特殊标记，通常用于表示消息数量、警告等"
							},
							"sources": [
								{
									"fileName": "src/types/cell.ts",
									"line": 40,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 128,
							"name": "context",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "上下文"
							},
							"sources": [
								{
									"fileName": "src/types/cell.ts",
									"line": 44,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 162,
								"name": "ICommonContext"
							}
						},
						{
							"id": 119,
							"name": "description",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "标题下方的描述性文字，推荐对其配置，以便用户更好的理解"
							},
							"sources": [
								{
									"fileName": "src/types/cell.ts",
									"line": 24,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 120,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 121,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 122,
															"name": "context",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 162,
																"name": "ICommonContext"
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "boolean"
															}
														]
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 139,
							"name": "testID",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "测试 id，用于自动化测试，规则如下",
								"text": "- 组件容器：${testId}\n- 标题：`${testId}-title` (当前使用的基准 Cell 暂不支持此功能)\n- 描述：`${testId}-description` (当前使用的基准 Cell 暂不支持此功能)\n- 开关：`${testId}-switch`\n- 值：`${testId}-value`\n- badge：`${testId}-badge`\n"
							},
							"sources": [
								{
									"fileName": "src/types/cell.ts",
									"line": 72,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 118,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "标题"
							},
							"sources": [
								{
									"fileName": "src/types/cell.ts",
									"line": 20,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 117,
							"name": "type",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/types/cell.ts",
									"line": 16,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 112,
								"name": "CellType"
							}
						},
						{
							"id": 123,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"comment": {
								"shortText": "右侧显示的数值",
								"text": "若数值为 boolean 类似，将自动显示为开关\n"
							},
							"sources": [
								{
									"fileName": "src/types/cell.ts",
									"line": 32,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									},
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 124,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 125,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 126,
															"name": "context",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reference",
																"id": 162,
																"name": "ICommonContext"
															}
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "boolean"
															}
														]
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 135,
							"name": "onChange",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/types/cell.ts",
									"line": 58,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 136,
									"name": "onChange",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "选项、开关点击后的回调事件"
									},
									"parameters": [
										{
											"id": 137,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												]
											}
										},
										{
											"id": 138,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 162,
												"name": "ICommonContext"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 132,
							"name": "onPress",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/types/cell.ts",
									"line": 54,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 133,
									"name": "onPress",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "点击事件"
									},
									"parameters": [
										{
											"id": 134,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 162,
												"name": "ICommonContext"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 129,
							"name": "options",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/types/cell.ts",
									"line": 49,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 130,
									"name": "options",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "选项配置\n若配置了选项，则会在右侧显示一个箭头，点击后会弹出选项菜单"
									},
									"parameters": [
										{
											"id": 131,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 162,
												"name": "ICommonContext"
											}
										}
									],
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								127,
								128,
								119,
								139,
								118,
								117,
								123
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								135,
								132,
								129
							]
						}
					],
					"sources": [
						{
							"fileName": "src/types/cell.ts",
							"line": 15,
							"character": 17
						}
					]
				},
				{
					"id": 162,
					"name": "ICommonContext",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 172,
							"name": "action",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/context.ts",
									"line": 25,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 171,
							"name": "state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/context.ts",
									"line": 24,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 166,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/context.ts",
									"line": 21,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "any"
							}
						},
						{
							"id": 163,
							"name": "i18n",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/context.ts",
									"line": 20,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 164,
									"name": "i18n",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 165,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						},
						{
							"id": 167,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/context.ts",
									"line": 23,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 168,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 169,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													}
												]
											}
										},
										{
											"id": 170,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "void"
													}
												],
												"name": "Promise"
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								172,
								171,
								166
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								163,
								167
							]
						}
					],
					"sources": [
						{
							"fileName": "src/types/context.ts",
							"line": 19,
							"character": 17
						}
					]
				},
				{
					"id": 147,
					"name": "IContext",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 158,
							"name": "action",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/context.ts",
									"line": 16,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 161,
								"name": "Action"
							}
						},
						{
							"id": 157,
							"name": "state",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/context.ts",
									"line": 15,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 160,
								"name": "State"
							}
						},
						{
							"id": 151,
							"name": "value",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/context.ts",
									"line": 8,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 159,
								"name": "Value"
							}
						},
						{
							"id": 148,
							"name": "i18n",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/context.ts",
									"line": 7,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 149,
									"name": "i18n",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 150,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						},
						{
							"id": 152,
							"name": "update",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/context.ts",
									"line": 10,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 153,
									"name": "update",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 154,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										}
									],
									"parameters": [
										{
											"id": 155,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 154,
												"name": "T"
											}
										},
										{
											"id": 156,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "indexedAccess",
												"indexType": {
													"type": "reference",
													"id": 154,
													"name": "T"
												},
												"objectType": {
													"type": "reference",
													"id": 159,
													"name": "Value"
												}
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "void"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "void"
													}
												],
												"name": "Promise"
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								158,
								157,
								151
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								148,
								152
							]
						}
					],
					"sources": [
						{
							"fileName": "src/types/context.ts",
							"line": 2,
							"character": 17
						}
					],
					"typeParameter": [
						{
							"id": 159,
							"name": "Value",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 143,
								"name": "TDict"
							}
						},
						{
							"id": 160,
							"name": "State",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 143,
								"name": "TDict"
							}
						},
						{
							"id": 161,
							"name": "Action",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 143,
								"name": "TDict"
							}
						}
					]
				},
				{
					"id": 189,
					"name": "IScreen",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 190,
							"name": "name",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/navigation.ts",
									"line": 8,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 201,
							"name": "navigationParam",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/types/navigation.ts",
									"line": 13,
									"character": 2
								}
							],
							"type": {
								"type": "reference",
								"id": 202,
								"name": "IParam"
							}
						},
						{
							"id": 194,
							"name": "options",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/navigation.ts",
									"line": 10,
									"character": 2
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 184,
										"name": "ScreenOptions"
									},
									{
										"type": "reflection",
										"declaration": {
											"id": 195,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 196,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 197,
															"name": "props",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "reflection",
																"declaration": {
																	"id": 198,
																	"name": "__type",
																	"kind": 65536,
																	"kindString": "Type literal",
																	"flags": {},
																	"children": [
																		{
																			"id": 200,
																			"name": "navigation",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "src/types/navigation.ts",
																					"line": 12,
																					"character": 42
																				}
																			],
																			"type": {
																				"type": "intrinsic",
																				"name": "any"
																			}
																		},
																		{
																			"id": 199,
																			"name": "route",
																			"kind": 1024,
																			"kindString": "Property",
																			"flags": {},
																			"sources": [
																				{
																					"fileName": "src/types/navigation.ts",
																					"line": 12,
																					"character": 16
																				}
																			],
																			"type": {
																				"type": "reference",
																				"id": 188,
																				"name": "ScreenOptionRoute"
																			}
																		}
																	],
																	"groups": [
																		{
																			"title": "Properties",
																			"kind": 1024,
																			"children": [
																				200,
																				199
																			]
																		}
																	]
																}
															}
														}
													],
													"type": {
														"type": "reference",
														"id": 184,
														"name": "ScreenOptions"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 191,
							"name": "component",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/navigation.ts",
									"line": 9,
									"character": 2
								}
							],
							"signatures": [
								{
									"id": 192,
									"name": "component",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 193,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Record"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Element"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								190,
								201,
								194
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								191
							]
						}
					],
					"sources": [
						{
							"fileName": "src/types/navigation.ts",
							"line": 7,
							"character": 17
						}
					],
					"typeParameter": [
						{
							"id": 202,
							"name": "IParam",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {}
						}
					]
				},
				{
					"id": 140,
					"name": "SectionData",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"children": [
						{
							"id": 142,
							"name": "data",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cell.ts",
									"line": 77,
									"character": 2
								}
							],
							"type": {
								"type": "array",
								"elementType": {
									"type": "reference",
									"id": 116,
									"name": "CellData"
								}
							}
						},
						{
							"id": 141,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/cell.ts",
									"line": 76,
									"character": 2
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								142,
								141
							]
						}
					],
					"sources": [
						{
							"fileName": "src/types/cell.ts",
							"line": 75,
							"character": 17
						}
					]
				},
				{
					"id": 71,
					"name": "ArrayElement",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types/array.ts",
							"line": 1,
							"character": 12
						}
					],
					"typeParameter": [
						{
							"id": 72,
							"name": "ArrayType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"type": {
								"type": "typeOperator",
								"operator": "readonly",
								"target": {
									"type": "array",
									"elementType": {
										"type": "intrinsic",
										"name": "unknown"
									}
								}
							}
						}
					],
					"type": {
						"type": "conditional",
						"checkType": {
							"type": "reference",
							"id": 72,
							"name": "ArrayType"
						},
						"extendsType": {
							"type": "typeOperator",
							"operator": "readonly",
							"target": {
								"type": "array",
								"elementType": {
									"type": "inferred",
									"name": "ElementType"
								}
							}
						},
						"trueType": {
							"type": "reference",
							"name": "ElementType"
						},
						"falseType": {
							"type": "intrinsic",
							"name": "never"
						}
					}
				},
				{
					"id": 203,
					"name": "DefaultScreenNavigationProp",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types/navigation.ts",
							"line": 16,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "RootStackParamList"
							},
							{
								"type": "literal",
								"value": "dev"
							}
						],
						"name": "NativeStackNavigationProp"
					}
				},
				{
					"id": 212,
					"name": "RenderFCProp",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types/react.ts",
							"line": 2,
							"character": 20
						}
					],
					"typeParameter": [
						{
							"id": 217,
							"name": "Props",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"default": {
								"type": "reflection",
								"declaration": {
									"id": 216,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "src/types/react.ts",
											"line": 2,
											"character": 41
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 213,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/react.ts",
									"line": 2,
									"character": 47
								}
							],
							"signatures": [
								{
									"id": 214,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 215,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "reference",
												"id": 217,
												"name": "Props"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "React.ReactElement"
									}
								}
							]
						}
					}
				},
				{
					"id": 218,
					"name": "RenderProp",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types/react.ts",
							"line": 5,
							"character": 20
						}
					],
					"typeParameter": [
						{
							"id": 220,
							"name": "Props",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"default": {
								"type": "reflection",
								"declaration": {
									"id": 219,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"sources": [
										{
											"fileName": "src/types/react.ts",
											"line": 5,
											"character": 39
										}
									]
								}
							}
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reference",
								"id": 212,
								"typeArguments": [
									{
										"type": "reference",
										"id": 220,
										"name": "Props"
									}
								],
								"name": "RenderFCProp"
							},
							{
								"type": "reference",
								"name": "React.ReactElement"
							}
						]
					}
				},
				{
					"id": 188,
					"name": "ScreenOptionRoute",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types/navigation.ts",
							"line": 6,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"name": "ParamListBase"
							},
							{
								"type": "typeOperator",
								"operator": "keyof",
								"target": {
									"type": "reference",
									"name": "ParamListBase"
								}
							}
						],
						"name": "RouteProp"
					}
				},
				{
					"id": 184,
					"name": "ScreenOptions",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types/navigation.ts",
							"line": 5,
							"character": 12
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 185,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/navigation.ts",
									"line": 5,
									"character": 28
								}
							],
							"indexSignature": {
								"id": 186,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 187,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					}
				},
				{
					"id": 176,
					"name": "TCellContext",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types/context.ts",
							"line": 52,
							"character": 12
						}
					],
					"type": {
						"type": "reference",
						"id": 147,
						"typeArguments": [
							{
								"type": "reference",
								"id": 143,
								"name": "TDict"
							},
							{
								"type": "reference",
								"id": 143,
								"name": "TDict"
							},
							{
								"type": "reference",
								"id": 143,
								"name": "TDict"
							}
						],
						"name": "IContext"
					}
				},
				{
					"id": 143,
					"name": "TDict",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types/context.ts",
							"line": 1,
							"character": 12
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 144,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"sources": [
								{
									"fileName": "src/types/context.ts",
									"line": 1,
									"character": 20
								}
							],
							"indexSignature": {
								"id": 145,
								"name": "__index",
								"kind": 8192,
								"kindString": "Index signature",
								"flags": {},
								"parameters": [
									{
										"id": 146,
										"name": "key",
										"kind": 32768,
										"flags": {},
										"type": {
											"type": "intrinsic",
											"name": "string"
										}
									}
								],
								"type": {
									"type": "intrinsic",
									"name": "any"
								}
							}
						}
					}
				},
				{
					"id": 50,
					"name": "default",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 51,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 52,
									"name": "components",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 49,
										"name": "__module"
									}
								},
								{
									"id": 53,
									"name": "contexts",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "__module"
									}
								},
								{
									"id": 54,
									"name": "hooks",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "__module"
									}
								},
								{
									"id": 70,
									"name": "i18n",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 23,
										"name": "__module"
									}
								},
								{
									"id": 55,
									"name": "managers",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "__module"
									}
								},
								{
									"id": 56,
									"name": "models",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "__module"
									}
								},
								{
									"id": 57,
									"name": "resources",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "__module"
									}
								},
								{
									"id": 60,
									"name": "screens",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 61,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 62,
													"name": "registerScreen",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "reflection",
														"declaration": {
															"id": 63,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 64,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 65,
																			"name": "key",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "intrinsic",
																				"name": "string"
																			}
																		},
																		{
																			"id": 66,
																			"name": "screen",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"id": 189,
																				"typeArguments": [
																					{
																						"type": "reflection",
																						"declaration": {
																							"id": 67,
																							"name": "__type",
																							"kind": 65536,
																							"kindString": "Type literal",
																							"flags": {},
																							"indexSignature": {
																								"id": 68,
																								"name": "__index",
																								"kind": 8192,
																								"kindString": "Index signature",
																								"flags": {},
																								"parameters": [
																									{
																										"id": 69,
																										"name": "key",
																										"kind": 32768,
																										"flags": {},
																										"type": {
																											"type": "intrinsic",
																											"name": "string"
																										}
																									}
																								],
																								"type": {
																									"type": "intrinsic",
																									"name": "any"
																								}
																							}
																						}
																					}
																				],
																				"name": "IScreen"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														62
													]
												}
											]
										}
									},
									"defaultValue": "..."
								},
								{
									"id": 58,
									"name": "shortcut",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "__module"
									}
								},
								{
									"id": 59,
									"name": "utils",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 19,
										"name": "__module"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										52,
										53,
										54,
										70,
										55,
										56,
										57,
										60,
										58,
										59
									]
								}
							]
						}
					}
				},
				{
					"id": 177,
					"name": "ContextDefaults",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types/context.ts",
							"line": 54,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"id": 162,
						"name": "ICommonContext"
					},
					"defaultValue": "..."
				},
				{
					"id": 174,
					"name": "ContextDefaultsAction",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types/context.ts",
							"line": 44,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "ICellAction"
					},
					"defaultValue": "..."
				},
				{
					"id": 175,
					"name": "ContextDefaultsState",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types/context.ts",
							"line": 48,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "ICellState"
					},
					"defaultValue": "..."
				},
				{
					"id": 173,
					"name": "ContextDefaultsValue",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types/context.ts",
							"line": 40,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "ICellValue"
					},
					"defaultValue": "..."
				},
				{
					"id": 18,
					"name": "app",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "beta",
								"text": "\n"
							}
						]
					},
					"sources": [
						{
							"fileName": "src/index.ts",
							"line": 28,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "unknown"
							}
						],
						"name": "ComponentType"
					},
					"defaultValue": "App"
				},
				{
					"id": 2,
					"name": "components",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 49,
						"name": "__module"
					}
				},
				{
					"id": 3,
					"name": "contexts",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reference",
						"name": "__module"
					}
				},
				{
					"id": 204,
					"name": "defaultScreenOptions",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types/navigation.ts",
							"line": 21,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 205,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 206,
									"name": "notionList",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 207,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 208,
													"name": "title",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "''"
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														208
													]
												}
											]
										}
									},
									"defaultValue": "..."
								},
								{
									"id": 209,
									"name": "webView",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 210,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 211,
													"name": "title",
													"kind": 1024,
													"kindString": "Property",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													},
													"defaultValue": "''"
												}
											],
											"groups": [
												{
													"title": "Properties",
													"kind": 1024,
													"children": [
														211
													]
												}
											]
										}
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										206,
										209
									]
								}
							]
						}
					},
					"defaultValue": "..."
				},
				{
					"id": 4,
					"name": "hooks",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reference",
						"name": "__module"
					}
				},
				{
					"id": 17,
					"name": "i18n",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 23,
						"name": "__module"
					}
				},
				{
					"id": 5,
					"name": "managers",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reference",
						"name": "__module"
					}
				},
				{
					"id": 6,
					"name": "models",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reference",
						"name": "__module"
					}
				},
				{
					"id": 7,
					"name": "resources",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reference",
						"name": "__module"
					}
				},
				{
					"id": 8,
					"name": "shortcut",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reference",
						"name": "__module"
					}
				},
				{
					"id": 9,
					"name": "utils",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reference",
						"id": 19,
						"name": "__module"
					}
				},
				{
					"id": 10,
					"name": "registerScreen",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 11,
							"name": "registerScreen",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 12,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 13,
									"name": "screen",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 189,
										"typeArguments": [
											{
												"type": "reflection",
												"declaration": {
													"id": 14,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": {
														"id": 15,
														"name": "__index",
														"kind": 8192,
														"kindString": "Index signature",
														"flags": {},
														"parameters": [
															{
																"id": 16,
																"name": "key",
																"kind": 32768,
																"flags": {},
																"type": {
																	"type": "intrinsic",
																	"name": "string"
																}
															}
														],
														"type": {
															"type": "intrinsic",
															"name": "any"
														}
													}
												}
											}
										],
										"name": "IScreen"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 8,
					"children": [
						112,
						103,
						91,
						73,
						86,
						178,
						108,
						97,
						82,
						79
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						116,
						162,
						147,
						189,
						140
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						71,
						203,
						212,
						218,
						188,
						184,
						176,
						143
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						50
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						177,
						174,
						175,
						173,
						18,
						2,
						3,
						204,
						4,
						17,
						5,
						6,
						7,
						8,
						9
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						10
					]
				}
			],
			"sources": [
				{
					"fileName": "src/index.ts",
					"line": 7,
					"character": 0
				}
			]
		},
		{
			"id": 19,
			"name": "Utils",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {},
			"originalName": "utils",
			"children": [
				{
					"id": 221,
					"name": "actionSheet",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 222,
							"name": "ActionSheetProviderContainer",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "src/utils/actionSheet.tsx",
									"line": 22,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 223,
									"name": "ActionSheetProviderContainer",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 224,
											"name": "props",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Props"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Element"
									}
								}
							]
						},
						{
							"id": 225,
							"name": "showActionSheet",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "src/utils/actionSheet.tsx",
									"line": 50,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 226,
									"name": "showActionSheet",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 227,
											"name": "options",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "IActionSheetOptions"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								222,
								225
							]
						}
					],
					"sources": [
						{
							"fileName": "src/utils/actionSheet.tsx",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 228,
					"name": "commonStyle",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 229,
							"name": "navigation",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/utils/commonStyle.ts",
									"line": 4,
									"character": 13
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 230,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 231,
											"name": "buttonContainer",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Style"
											},
											"defaultValue": "..."
										},
										{
											"id": 232,
											"name": "icon",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Style"
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												231,
												232
											]
										}
									]
								}
							},
							"defaultValue": "..."
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								229
							]
						}
					],
					"sources": [
						{
							"fileName": "src/utils/commonStyle.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 233,
					"name": "editor",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 244,
							"name": "default",
							"kind": 16777216,
							"kindString": "Reference",
							"flags": {},
							"target": 238
						},
						{
							"id": 234,
							"name": "IOpenOptions",
							"kind": 256,
							"kindString": "Interface",
							"flags": {},
							"children": [
								{
									"id": 236,
									"name": "mediaKey",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/utils/editor.ts",
											"line": 11,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 235,
									"name": "mediaType",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/utils/editor.ts",
											"line": 10,
											"character": 2
										}
									],
									"type": {
										"type": "reference",
										"id": 178,
										"name": "EMediaItemType"
									}
								},
								{
									"id": 237,
									"name": "url",
									"kind": 1024,
									"kindString": "Property",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/utils/editor.ts",
											"line": 12,
											"character": 2
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										236,
										235,
										237
									]
								}
							],
							"sources": [
								{
									"fileName": "src/utils/editor.ts",
									"line": 9,
									"character": 17
								}
							]
						},
						{
							"id": 238,
							"name": "editor",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/utils/editor.ts",
									"line": 15,
									"character": 13
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 239,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 240,
											"name": "open",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 241,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 242,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 243,
																	"name": "options",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"id": 234,
																		"name": "IOpenOptions"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "void"
															}
														}
													]
												}
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												240
											]
										}
									]
								}
							},
							"defaultValue": "..."
						}
					],
					"groups": [
						{
							"title": "References",
							"kind": 16777216,
							"children": [
								244
							]
						},
						{
							"title": "Interfaces",
							"kind": 256,
							"children": [
								234
							]
						},
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								238
							]
						}
					],
					"sources": [
						{
							"fileName": "src/utils/editor.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 245,
					"name": "fs",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 246,
							"name": "copyDir",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "src/utils/fs.ts",
									"line": 5,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 247,
									"name": "copyDir",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 248,
											"name": "baseFromPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 249,
											"name": "baseDestPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 250,
											"name": "fromPath",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "''"
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								246
							]
						}
					],
					"sources": [
						{
							"fileName": "src/utils/fs.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 251,
					"name": "getRouteParam",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 256,
							"name": "default",
							"kind": 16777216,
							"kindString": "Reference",
							"flags": {},
							"target": 252
						},
						{
							"id": 252,
							"name": "useGetRouteParam",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "src/utils/getRouteParam.ts",
									"line": 4,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 253,
									"name": "useGetRouteParam",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 254,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "RootStackParamList"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 255,
											"name": "screenName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 254,
												"name": "T"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "indexedAccess",
														"indexType": {
															"type": "reference",
															"id": 254,
															"name": "T"
														},
														"objectType": {
															"type": "reference",
															"name": "RootStackParamList"
														}
													}
												],
												"name": "Readonly"
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "References",
							"kind": 16777216,
							"children": [
								256
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								252
							]
						}
					],
					"sources": [
						{
							"fileName": "src/utils/getRouteParam.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 257,
					"name": "nav",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 276,
							"name": "screenOptions",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/utils/nav.ts",
									"line": 75,
									"character": 13
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 277,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 278,
											"name": "hideHeaderShadow",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 279,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 280,
															"name": "headerShadowVisible",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "boolean"
															},
															"defaultValue": "false"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																280
															]
														}
													]
												}
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												278
											]
										}
									]
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 263,
							"name": "_push",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isPrivate": true
							},
							"sources": [
								{
									"fileName": "src/utils/nav.ts",
									"line": 24,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 264,
									"name": "_push",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {
										"isPrivate": true
									},
									"comment": {
										"shortText": "Internal function, this method is not recommended",
										"tags": [
											{
												"tag": "internal",
												"text": ""
											}
										]
									},
									"typeParameter": [
										{
											"id": 265,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "RootStackParamList"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 266,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "_page_"
											},
											"type": {
												"type": "reference",
												"id": 265,
												"name": "T"
											}
										},
										{
											"id": 267,
											"name": "params",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "\n"
											},
											"type": {
												"type": "indexedAccess",
												"indexType": {
													"type": "reference",
													"id": 265,
													"name": "T"
												},
												"objectType": {
													"type": "reference",
													"name": "RootStackParamList"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 258,
							"name": "navigate",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "src/utils/nav.ts",
									"line": 7,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 259,
									"name": "navigate",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"typeParameter": [
										{
											"id": 260,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"type": {
												"type": "typeOperator",
												"operator": "keyof",
												"target": {
													"type": "reference",
													"name": "RootStackParamList"
												}
											}
										}
									],
									"parameters": [
										{
											"id": 261,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"id": 260,
												"name": "T"
											}
										},
										{
											"id": 262,
											"name": "params",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "indexedAccess",
												"indexType": {
													"type": "reference",
													"id": 260,
													"name": "T"
												},
												"objectType": {
													"type": "reference",
													"name": "RootStackParamList"
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 274,
							"name": "navigateToHomeScreen",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "src/utils/nav.ts",
									"line": 71,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 275,
									"name": "navigateToHomeScreen",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 272,
							"name": "navigationGoBack",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "src/utils/nav.ts",
									"line": 65,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 273,
									"name": "navigationGoBack",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 268,
							"name": "push",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"sources": [
								{
									"fileName": "src/utils/nav.ts",
									"line": 53,
									"character": 16
								}
							],
							"signatures": [
								{
									"id": 269,
									"name": "push",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "__Recommend this method.__ Load screen as navigation push animation effect",
										"tags": [
											{
												"tag": "example",
												"text": "\n```javascript\npush(\n 'Home',\n {\n   userId: '123',\n   extra: {\n     // ...\n   }\n }\n);\n```\n"
											}
										]
									},
									"parameters": [
										{
											"id": 270,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The screen name which been registered in business logic"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 271,
											"name": "params",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Parameters passed to the target screen\n"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Record"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								276
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								263,
								258,
								274,
								272,
								268
							]
						}
					],
					"sources": [
						{
							"fileName": "src/utils/nav.ts",
							"line": 4,
							"character": 0
						}
					]
				},
				{
					"id": 281,
					"name": "notion",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 282,
							"name": "getList",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "src/utils/notion.ts",
									"line": 9,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 283,
									"name": "getList",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 284,
											"name": "databaseId",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "array",
												"elementType": {
													"type": "reflection",
													"declaration": {
														"id": 285,
														"name": "__type",
														"kind": 65536,
														"kindString": "Type literal",
														"flags": {},
														"indexSignature": {
															"id": 286,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 287,
																	"name": "key",
																	"kind": 32768,
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "any"
															}
														}
													}
												}
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								282
							]
						}
					],
					"sources": [
						{
							"fileName": "src/utils/notion.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 288,
					"name": "platform",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 290,
							"name": "Android",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"comment": {
								"shortText": "Determine whether the current running platform is Android"
							},
							"sources": [
								{
									"fileName": "src/utils/platform.ts",
									"line": 11,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "..."
						},
						{
							"id": 289,
							"name": "iOS",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"comment": {
								"shortText": "Determine whether the current running platform is iOS"
							},
							"sources": [
								{
									"fileName": "src/utils/platform.ts",
									"line": 6,
									"character": 13
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							},
							"defaultValue": "..."
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								290,
								289
							]
						}
					],
					"sources": [
						{
							"fileName": "src/utils/platform.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 336,
					"name": "screen",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 337,
							"name": "IScreenItem",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "src/utils/screen.ts",
									"line": 3,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"id": 189,
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record"
									}
								],
								"name": "IScreen"
							}
						},
						{
							"id": 338,
							"name": "TScreens",
							"kind": 4194304,
							"kindString": "Type alias",
							"flags": {},
							"sources": [
								{
									"fileName": "src/utils/screen.ts",
									"line": 4,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "reference",
										"id": 337,
										"name": "IScreenItem"
									}
								],
								"name": "Map"
							}
						},
						{
							"id": 345,
							"name": "getScreenByKey",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "src/utils/screen.ts",
									"line": 33,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 346,
									"name": "getScreenByKey",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "get target screen component by key",
										"returns": "TScreens\n"
									},
									"parameters": [
										{
											"id": 347,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "screen key defined in registerScreen"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"id": 337,
												"name": "IScreenItem"
											}
										]
									}
								}
							]
						},
						{
							"id": 343,
							"name": "getScreens",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "src/utils/screen.ts",
									"line": 26,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 344,
									"name": "getScreens",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "get current screen list in application run time",
										"returns": "current screen list\n"
									},
									"type": {
										"type": "reference",
										"id": 338,
										"name": "TScreens"
									}
								}
							]
						},
						{
							"id": 339,
							"name": "registerScreen",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "src/utils/screen.ts",
									"line": 12,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 340,
									"name": "registerScreen",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Register the Screen interface to the application navigation"
									},
									"parameters": [
										{
											"id": 341,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Screen name, will be used when call `nav.push` function"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 342,
											"name": "screen",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Screen export object\n"
											},
											"type": {
												"type": "reference",
												"id": 337,
												"name": "IScreenItem"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 348,
							"name": "setupInitialRoute",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "src/utils/screen.ts",
									"line": 42,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 349,
									"name": "setupInitialRoute",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "setup initial route config for first screen component, call it before the main component render"
									},
									"parameters": [
										{
											"id": 350,
											"name": "screenName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "screen name defined in registerScreen"
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 351,
											"name": "screenParam",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "screen param that will be passed to screen component\n"
											},
											"type": {
												"type": "reference",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "any"
													}
												],
												"name": "Record"
											},
											"defaultValue": "{}"
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Type aliases",
							"kind": 4194304,
							"children": [
								337,
								338
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								345,
								343,
								339,
								348
							]
						}
					],
					"sources": [
						{
							"fileName": "src/utils/screen.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 291,
					"name": "share",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 297,
							"name": "default",
							"kind": 16777216,
							"kindString": "Reference",
							"flags": {},
							"target": 292
						},
						{
							"id": 292,
							"name": "display",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "src/utils/share.ts",
									"line": 9,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 293,
									"name": "display",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Open the system sharing menu"
									},
									"parameters": [
										{
											"id": 294,
											"name": "title",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 295,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 296,
											"name": "url",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "\n"
											},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "array",
														"elementType": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "void"
											}
										],
										"name": "Promise"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "References",
							"kind": 16777216,
							"children": [
								297
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								292
							]
						}
					],
					"sources": [
						{
							"fileName": "src/utils/share.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 298,
					"name": "string",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 299,
							"name": "upperCaseFirstLetter",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "src/utils/string.ts",
									"line": 1,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 300,
									"name": "upperCaseFirstLetter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 301,
											"name": "str",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								299
							]
						}
					],
					"sources": [
						{
							"fileName": "src/utils/string.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 302,
					"name": "time",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 303,
							"name": "formatSecondsInto_00_00",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "src/utils/time.ts",
									"line": 1,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 304,
									"name": "formatSecondsInto_00_00",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 305,
											"name": "timeInSecond",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								303
							]
						}
					],
					"sources": [
						{
							"fileName": "src/utils/time.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 306,
					"name": "tip",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 307,
							"name": "alert",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "src/utils/tip.tsx",
									"line": 3,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 308,
									"name": "alert",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 309,
											"name": "title",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 310,
											"name": "message",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								307
							]
						}
					],
					"sources": [
						{
							"fileName": "src/utils/tip.tsx",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 311,
					"name": "uiConstant",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 312,
							"name": "touchableActiveOpacity",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/utils/uiConstant.ts",
									"line": 1,
									"character": 13
								}
							],
							"type": {
								"type": "literal",
								"value": 0.7
							},
							"defaultValue": "0.7"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								312
							]
						}
					],
					"sources": [
						{
							"fileName": "src/utils/uiConstant.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 313,
					"name": "webDocument",
					"kind": 4,
					"kindString": "Namespace",
					"flags": {},
					"children": [
						{
							"id": 314,
							"name": "webDocumentKey",
							"kind": 32,
							"kindString": "Variable",
							"flags": {},
							"sources": [
								{
									"fileName": "src/utils/webDocument.ts",
									"line": 18,
									"character": 13
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 315,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 321,
											"name": "NOTION_DATABASE_ID_EDIT_MEDIA",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 319,
											"name": "NOTION_DATABASE_ID_FAQ",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 320,
											"name": "NOTION_DATABASE_ID_USER_MANUAL",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 317,
											"name": "NOTION_EXTERNAL_SITE_DOMAIN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 318,
											"name": "NOTION_FAQ_LIST_ID",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 316,
											"name": "NOTION_TOKEN",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 324,
											"name": "PAGE_URL_APP_INFO",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 325,
											"name": "PAGE_URL_CONNECT_TO_CAMERA",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 322,
											"name": "PAGE_URL_PRIVACY_POLICY",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 323,
											"name": "PAGE_URL_TERMS_AND_CONDITIONS",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												321,
												319,
												320,
												317,
												318,
												316,
												324,
												325,
												322,
												323
											]
										}
									]
								}
							},
							"defaultValue": "..."
						},
						{
							"id": 326,
							"name": "openList",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "src/utils/webDocument.ts",
									"line": 33,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 327,
									"name": "openList",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 328,
											"name": "option",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 329,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 330,
															"name": "title",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															},
															"defaultValue": "''"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																330
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 331,
							"name": "openWeb",
							"kind": 64,
							"kindString": "Function",
							"flags": {
								"isConst": true
							},
							"sources": [
								{
									"fileName": "src/utils/webDocument.ts",
									"line": 36,
									"character": 13
								}
							],
							"signatures": [
								{
									"id": 332,
									"name": "openWeb",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 333,
											"name": "option",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 334,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"children": [
														{
															"id": 335,
															"name": "title",
															"kind": 1024,
															"kindString": "Property",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															},
															"defaultValue": "''"
														}
													],
													"groups": [
														{
															"title": "Properties",
															"kind": 1024,
															"children": [
																335
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								314
							]
						},
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								326,
								331
							]
						}
					],
					"sources": [
						{
							"fileName": "src/utils/webDocument.ts",
							"line": 1,
							"character": 0
						}
					]
				},
				{
					"id": 21,
					"name": "default",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 22,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {}
						}
					}
				},
				{
					"id": 20,
					"name": "tw",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/utils/index.ts",
							"line": 6,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "TailwindFn"
					},
					"defaultValue": "_tw"
				}
			],
			"groups": [
				{
					"title": "Namespaces",
					"kind": 4,
					"children": [
						221,
						228,
						233,
						245,
						251,
						257,
						281,
						288,
						336,
						291,
						298,
						302,
						306,
						311,
						313
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						21
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						20
					]
				}
			],
			"sources": [
				{
					"fileName": "src/utils/index.ts",
					"line": 5,
					"character": 0
				}
			]
		},
		{
			"id": 23,
			"name": "i18n",
			"kind": 2,
			"kindString": "Module",
			"flags": {},
			"comment": {
				"shortText": "Multi-language support"
			},
			"children": [
				{
					"id": 34,
					"name": "default",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 35,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 40,
									"name": "changeLanguage",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 41,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 42,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 43,
															"name": "languageCode",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 36,
									"name": "instance",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "i18n"
									},
									"defaultValue": "_i18n"
								},
								{
									"id": 44,
									"name": "registerTranslationModule",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 45,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 46,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Register business language module in sub business packages.\nPlease call this function before `setup`"
													},
													"parameters": [
														{
															"id": 47,
															"name": "moduleName",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														},
														{
															"id": 48,
															"name": "translationModule",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"comment": {
																"shortText": "\n"
															},
															"type": {
																"type": "reference",
																"name": "ITranslationModule"
															}
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								},
								{
									"id": 37,
									"name": "setup",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 38,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 39,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"comment": {
														"shortText": "Please call this function in App.tsx"
													},
													"type": {
														"type": "intrinsic",
														"name": "void"
													}
												}
											]
										}
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										40,
										36,
										44,
										37
									]
								}
							]
						}
					}
				},
				{
					"id": 33,
					"name": "i18n",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"sources": [
						{
							"fileName": "src/i18n/index.ts",
							"line": 96,
							"character": 13
						}
					],
					"type": {
						"type": "reference",
						"name": "i18n"
					},
					"defaultValue": "_i18n"
				},
				{
					"id": 30,
					"name": "changeLanguage",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "src/i18n/index.ts",
							"line": 92,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 31,
							"name": "changeLanguage",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 32,
									"name": "languageCode",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 24,
					"name": "registerTranslationModule",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "src/i18n/index.ts",
							"line": 59,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 25,
							"name": "registerTranslationModule",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Register business language module in sub business packages.\nPlease call this function before `setup`"
							},
							"parameters": [
								{
									"id": 26,
									"name": "moduleName",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 27,
									"name": "translationModule",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"shortText": "\n"
									},
									"type": {
										"type": "reference",
										"name": "ITranslationModule"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 28,
					"name": "setup",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"sources": [
						{
							"fileName": "src/i18n/index.ts",
							"line": 76,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 29,
							"name": "setup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Please call this function in App.tsx"
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 352,
					"name": "useNameSpace",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/i18n/useNameSpace.ts",
							"line": 3,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 353,
							"name": "useNameSpace",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 354,
									"name": "namespace",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 355,
									"name": "options",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 356,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"indexSignature": {
												"id": 357,
												"name": "__index",
												"kind": 8192,
												"kindString": "Index signature",
												"flags": {},
												"parameters": [
													{
														"id": 358,
														"name": "key",
														"kind": 32768,
														"flags": {},
														"type": {
															"type": "intrinsic",
															"name": "string"
														}
													}
												],
												"type": {
													"type": "intrinsic",
													"name": "any"
												}
											}
										}
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 359,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 365,
											"name": "i18n",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "i18n"
											}
										},
										{
											"id": 360,
											"name": "t",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 361,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 362,
															"name": "__type",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 363,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "intrinsic",
																		"name": "string"
																	}
																},
																{
																	"id": 364,
																	"name": "params",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {
																		"isRest": true
																	},
																	"type": {
																		"type": "array",
																		"elementType": {
																			"type": "intrinsic",
																			"name": "any"
																		}
																	}
																}
															],
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													]
												}
											},
											"defaultValue": "translateFunction"
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												365,
												360
											]
										}
									]
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						34
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						33
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						30,
						24,
						28,
						352
					]
				}
			],
			"sources": [
				{
					"fileName": "src/i18n/index.ts",
					"line": 6,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"kind": 2,
			"children": [
				49,
				1,
				19,
				23
			]
		}
	]
}